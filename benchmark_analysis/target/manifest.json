{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v2.json", "dbt_version": "0.20.0", "generated_at": "2021-08-03T11:24:26.400555Z", "invocation_id": "104aca45-c018-4942-998b-361fd8e7cb3b", "env": {}, "project_id": "b4c9e01898287cce14ad1fd35cd5d71b", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "spark"}, "nodes": {"model.benchmark_analysis.agg_10gb_per_run": {"raw_sql": "{{ agg_results_per_run('10gb') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_run", "macro.dbt.create_or_replace_view"], "nodes": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "agg", "10gb", "agg_10gb_per_run"], "unique_id": "model.benchmark_analysis.agg_10gb_per_run", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "agg/10gb/agg_10gb_per_run.sql", "original_file_path": "models/agg/10gb/agg_10gb_per_run.sql", "name": "agg_10gb_per_run", "alias": "agg_10gb_per_run", "checksum": {"name": "sha256", "checksum": "4b8e5ad1c789b7130ad90d74fef549617967b6ded8650620b16a96a37371bba7"}, "tags": [], "refs": [["fact_performance_logs"], ["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/agg/10gb/agg_10gb_per_run.sql", "build_path": "target/run/benchmark_analysis/models/agg/10gb/agg_10gb_per_run.sql", "deferred": false, "unrendered_config": {}, "created_at": 1627989867, "compiled_sql": "\n    \n   \n    SELECT\n        SUM(l.elapsed_min) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        l.run_id,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\n    FROM dev_benchmark.fact_performance_logs l\n    JOIN dev_benchmark.stg_run_info r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '10gb'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.run_id, l.is_partitioned\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.agg_10gb_per_run"}, "model.benchmark_analysis.agg_10gb_per_thread": {"raw_sql": "{{ agg_results_per_thread('10gb') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_thread", "macro.dbt.create_or_replace_view"], "nodes": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "agg", "10gb", "agg_10gb_per_thread"], "unique_id": "model.benchmark_analysis.agg_10gb_per_thread", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "agg/10gb/agg_10gb_per_thread.sql", "original_file_path": "models/agg/10gb/agg_10gb_per_thread.sql", "name": "agg_10gb_per_thread", "alias": "agg_10gb_per_thread", "checksum": {"name": "sha256", "checksum": "d5508c56dc47b42d0e779c4a4d3cf423b865a203472121946408244f541af1a2"}, "tags": [], "refs": [["fact_performance_logs"], ["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/agg/10gb/agg_10gb_per_thread.sql", "build_path": "target/run/benchmark_analysis/models/agg/10gb/agg_10gb_per_thread.sql", "deferred": false, "unrendered_config": {}, "created_at": 1627989867, "compiled_sql": "\n    \n   \n    SELECT\n        SUM(l.elapsed_min) / MAX(l.run_id) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        MAX(l.run_id) AS runs_number,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        CASE l.is_partitioned\n            WHEN true THEN concat(l.technology_name, '-partitioned')  \n            ELSE concat(l.technology_name, '-non-partitioned')\n        END AS run_category,\n        \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\n    FROM dev_benchmark.fact_performance_logs l\n    JOIN dev_benchmark.stg_run_info r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '10gb'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.is_partitioned\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.agg_10gb_per_thread"}, "model.benchmark_analysis.agg_10gb_with_pricing": {"raw_sql": "{{ agg_results_per_thread_with_pricing('10gb') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_thread_with_pricing", "macro.dbt.create_or_replace_view"], "nodes": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info", "model.benchmark_analysis.stg_databricks_clusters", "model.benchmark_analysis.stg_synapse_consumption"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "agg", "10gb", "agg_10gb_with_pricing"], "unique_id": "model.benchmark_analysis.agg_10gb_with_pricing", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "agg/10gb/agg_10gb_with_pricing.sql", "original_file_path": "models/agg/10gb/agg_10gb_with_pricing.sql", "name": "agg_10gb_with_pricing", "alias": "agg_10gb_with_pricing", "checksum": {"name": "sha256", "checksum": "89a7c2414e163e686b42c06260f5b483fcb8c2d480eea8c1d34247587477e593"}, "tags": [], "refs": [["fact_performance_logs"], ["stg_run_info"], ["stg_databricks_clusters"], ["stg_synapse_consumption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/agg/10gb/agg_10gb_with_pricing.sql", "build_path": "target/run/benchmark_analysis/models/agg/10gb/agg_10gb_with_pricing.sql", "deferred": false, "unrendered_config": {}, "created_at": 1627989867, "compiled_sql": "\n    \n    WITH logs AS (\n        \n    \n   \n    SELECT\n        SUM(l.elapsed_min) / MAX(l.run_id) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        MAX(l.run_id) AS runs_number,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        CASE l.is_partitioned\n            WHEN true THEN concat(l.technology_name, '-partitioned')  \n            ELSE concat(l.technology_name, '-non-partitioned')\n        END AS run_category,\n        \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\n    FROM dev_benchmark.fact_performance_logs l\n    JOIN dev_benchmark.stg_run_info r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '10gb'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.is_partitioned\n\n    \n\n    ),\n    databricks_logs AS (\n        SELECT \n            d.*,\n            d.elapsed_min_sum / 60 * c.hourly_combined_cost AS cost_usd\n        FROM logs d\n        LEFT JOIN dev_benchmark.stg_databricks_clusters c ON c.cluster_type = regexp_extract(lcase(d.source_file_name), '([^_]+)$', 1) \n        WHERE d.technology_name == 'databricks'\n    ),\n    synapse_logs AS (\n        SELECT \n            s.*,\n            c.data_processed_sum_tb / s.runs_number * 5 AS cost_usd\n        FROM logs s\n        LEFT JOIN dev_benchmark.stg_synapse_consumption c ON c.log_file_name = s.source_file_name\n        WHERE s.technology_name == 'synapse'\n    )\n\n    SELECT \n        *\n    FROM databricks_logs\n    UNION\n    SELECT \n        *\n    FROM synapse_logs\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.agg_10gb_with_pricing"}, "model.benchmark_analysis.agg_1gb_per_run": {"raw_sql": "{{ agg_results_per_run('1gb') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_run", "macro.dbt.create_or_replace_view"], "nodes": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "agg", "1gb", "agg_1gb_per_run"], "unique_id": "model.benchmark_analysis.agg_1gb_per_run", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "agg/1gb/agg_1gb_per_run.sql", "original_file_path": "models/agg/1gb/agg_1gb_per_run.sql", "name": "agg_1gb_per_run", "alias": "agg_1gb_per_run", "checksum": {"name": "sha256", "checksum": "ca1ac4b2535675b1984df713e7210027a052482b11626234f370a4d9164425e3"}, "tags": [], "refs": [["fact_performance_logs"], ["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/agg/1gb/agg_1gb_per_run.sql", "build_path": "target/run/benchmark_analysis/models/agg/1gb/agg_1gb_per_run.sql", "deferred": false, "unrendered_config": {}, "created_at": 1627989867, "compiled_sql": "\n    \n   \n    SELECT\n        SUM(l.elapsed_min) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        l.run_id,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\n    FROM dev_benchmark.fact_performance_logs l\n    JOIN dev_benchmark.stg_run_info r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '1gb'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.run_id, l.is_partitioned\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.agg_1gb_per_run"}, "model.benchmark_analysis.agg_1gb_per_thread": {"raw_sql": "{{ agg_results_per_thread('1gb') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_thread", "macro.dbt.create_or_replace_view"], "nodes": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "agg", "1gb", "agg_1gb_per_thread"], "unique_id": "model.benchmark_analysis.agg_1gb_per_thread", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "agg/1gb/agg_1gb_per_thread.sql", "original_file_path": "models/agg/1gb/agg_1gb_per_thread.sql", "name": "agg_1gb_per_thread", "alias": "agg_1gb_per_thread", "checksum": {"name": "sha256", "checksum": "82169b43dfeda8c55ec06cabc6712321c0782cd46d80a0d4bfc648436a9f9bb0"}, "tags": [], "refs": [["fact_performance_logs"], ["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/agg/1gb/agg_1gb_per_thread.sql", "build_path": "target/run/benchmark_analysis/models/agg/1gb/agg_1gb_per_thread.sql", "deferred": false, "unrendered_config": {}, "created_at": 1627989867, "compiled_sql": "\n    \n   \n    SELECT\n        SUM(l.elapsed_min) / MAX(l.run_id) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        MAX(l.run_id) AS runs_number,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        CASE l.is_partitioned\n            WHEN true THEN concat(l.technology_name, '-partitioned')  \n            ELSE concat(l.technology_name, '-non-partitioned')\n        END AS run_category,\n        \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\n    FROM dev_benchmark.fact_performance_logs l\n    JOIN dev_benchmark.stg_run_info r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '1gb'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.is_partitioned\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.agg_1gb_per_thread"}, "model.benchmark_analysis.agg_1gb_with_pricing": {"raw_sql": "{{ agg_results_per_thread_with_pricing('1gb') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_thread_with_pricing", "macro.dbt.create_or_replace_view"], "nodes": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info", "model.benchmark_analysis.stg_databricks_clusters", "model.benchmark_analysis.stg_synapse_consumption"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "agg", "1gb", "agg_1gb_with_pricing"], "unique_id": "model.benchmark_analysis.agg_1gb_with_pricing", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "agg/1gb/agg_1gb_with_pricing.sql", "original_file_path": "models/agg/1gb/agg_1gb_with_pricing.sql", "name": "agg_1gb_with_pricing", "alias": "agg_1gb_with_pricing", "checksum": {"name": "sha256", "checksum": "926bb461b70d751f2f26c239e0727b6377237e696a2eed43dfbd46695ac73cf9"}, "tags": [], "refs": [["fact_performance_logs"], ["stg_run_info"], ["stg_databricks_clusters"], ["stg_synapse_consumption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/agg/1gb/agg_1gb_with_pricing.sql", "build_path": "target/run/benchmark_analysis/models/agg/1gb/agg_1gb_with_pricing.sql", "deferred": false, "unrendered_config": {}, "created_at": 1627989867, "compiled_sql": "\n    \n    WITH logs AS (\n        \n    \n   \n    SELECT\n        SUM(l.elapsed_min) / MAX(l.run_id) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        MAX(l.run_id) AS runs_number,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        CASE l.is_partitioned\n            WHEN true THEN concat(l.technology_name, '-partitioned')  \n            ELSE concat(l.technology_name, '-non-partitioned')\n        END AS run_category,\n        \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\n    FROM dev_benchmark.fact_performance_logs l\n    JOIN dev_benchmark.stg_run_info r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '1gb'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.is_partitioned\n\n    \n\n    ),\n    databricks_logs AS (\n        SELECT \n            d.*,\n            d.elapsed_min_sum / 60 * c.hourly_combined_cost AS cost_usd\n        FROM logs d\n        LEFT JOIN dev_benchmark.stg_databricks_clusters c ON c.cluster_type = regexp_extract(lcase(d.source_file_name), '([^_]+)$', 1) \n        WHERE d.technology_name == 'databricks'\n    ),\n    synapse_logs AS (\n        SELECT \n            s.*,\n            c.data_processed_sum_tb / s.runs_number * 5 AS cost_usd\n        FROM logs s\n        LEFT JOIN dev_benchmark.stg_synapse_consumption c ON c.log_file_name = s.source_file_name\n        WHERE s.technology_name == 'synapse'\n    )\n\n    SELECT \n        *\n    FROM databricks_logs\n    UNION\n    SELECT \n        *\n    FROM synapse_logs\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.agg_1gb_with_pricing"}, "model.benchmark_analysis.agg_1tb_per_run": {"raw_sql": "{{ agg_results_per_run('1tb') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_run", "macro.dbt.create_or_replace_view"], "nodes": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "agg", "1tb", "agg_1tb_per_run"], "unique_id": "model.benchmark_analysis.agg_1tb_per_run", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "agg/1tb/agg_1tb_per_run.sql", "original_file_path": "models/agg/1tb/agg_1tb_per_run.sql", "name": "agg_1tb_per_run", "alias": "agg_1tb_per_run", "checksum": {"name": "sha256", "checksum": "5efdc472b826e4d894177e09bfc00a9dcc93ac0ee7f6cdaffc66050a42ee3efc"}, "tags": [], "refs": [["fact_performance_logs"], ["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/agg/1tb/agg_1tb_per_run.sql", "build_path": "target/run/benchmark_analysis/models/agg/1tb/agg_1tb_per_run.sql", "deferred": false, "unrendered_config": {}, "created_at": 1627989867, "compiled_sql": "\n    \n   \n    SELECT\n        SUM(l.elapsed_min) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        l.run_id,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\n    FROM dev_benchmark.fact_performance_logs l\n    JOIN dev_benchmark.stg_run_info r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '1tb'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.run_id, l.is_partitioned\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.agg_1tb_per_run"}, "model.benchmark_analysis.agg_1tb_per_thread": {"raw_sql": "{{ agg_results_per_thread('1tb') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_thread", "macro.dbt.create_or_replace_view"], "nodes": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "agg", "1tb", "agg_1tb_per_thread"], "unique_id": "model.benchmark_analysis.agg_1tb_per_thread", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "agg/1tb/agg_1tb_per_thread.sql", "original_file_path": "models/agg/1tb/agg_1tb_per_thread.sql", "name": "agg_1tb_per_thread", "alias": "agg_1tb_per_thread", "checksum": {"name": "sha256", "checksum": "8ae047b0dd33315a9d09bf45d7aa33cb7978dd7c20c7d95f3725658f23cdfc46"}, "tags": [], "refs": [["fact_performance_logs"], ["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/agg/1tb/agg_1tb_per_thread.sql", "build_path": "target/run/benchmark_analysis/models/agg/1tb/agg_1tb_per_thread.sql", "deferred": false, "unrendered_config": {}, "created_at": 1627989867, "compiled_sql": "\n    \n   \n    SELECT\n        SUM(l.elapsed_min) / MAX(l.run_id) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        MAX(l.run_id) AS runs_number,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        CASE l.is_partitioned\n            WHEN true THEN concat(l.technology_name, '-partitioned')  \n            ELSE concat(l.technology_name, '-non-partitioned')\n        END AS run_category,\n        \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\n    FROM dev_benchmark.fact_performance_logs l\n    JOIN dev_benchmark.stg_run_info r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '1tb'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.is_partitioned\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.agg_1tb_per_thread"}, "model.benchmark_analysis.agg_1tb_with_pricing": {"raw_sql": "{{ agg_results_per_thread_with_pricing('1tb') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_thread_with_pricing", "macro.dbt.create_or_replace_view"], "nodes": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info", "model.benchmark_analysis.stg_databricks_clusters", "model.benchmark_analysis.stg_synapse_consumption"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "agg", "1tb", "agg_1tb_with_pricing"], "unique_id": "model.benchmark_analysis.agg_1tb_with_pricing", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "agg/1tb/agg_1tb_with_pricing.sql", "original_file_path": "models/agg/1tb/agg_1tb_with_pricing.sql", "name": "agg_1tb_with_pricing", "alias": "agg_1tb_with_pricing", "checksum": {"name": "sha256", "checksum": "0988f1858b0c0be7188122005b505a8e3bb0ad4dafc80bc05218cd8c269a5648"}, "tags": [], "refs": [["fact_performance_logs"], ["stg_run_info"], ["stg_databricks_clusters"], ["stg_synapse_consumption"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/agg/1tb/agg_1tb_with_pricing.sql", "build_path": "target/run/benchmark_analysis/models/agg/1tb/agg_1tb_with_pricing.sql", "deferred": false, "unrendered_config": {}, "created_at": 1627989867, "compiled_sql": "\n    \n    WITH logs AS (\n        \n    \n   \n    SELECT\n        SUM(l.elapsed_min) / MAX(l.run_id) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        MAX(l.run_id) AS runs_number,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        CASE l.is_partitioned\n            WHEN true THEN concat(l.technology_name, '-partitioned')  \n            ELSE concat(l.technology_name, '-non-partitioned')\n        END AS run_category,\n        \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\n    FROM dev_benchmark.fact_performance_logs l\n    JOIN dev_benchmark.stg_run_info r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '1tb'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.is_partitioned\n\n    \n\n    ),\n    databricks_logs AS (\n        SELECT \n            d.*,\n            d.elapsed_min_sum / 60 * c.hourly_combined_cost AS cost_usd\n        FROM logs d\n        LEFT JOIN dev_benchmark.stg_databricks_clusters c ON c.cluster_type = regexp_extract(lcase(d.source_file_name), '([^_]+)$', 1) \n        WHERE d.technology_name == 'databricks'\n    ),\n    synapse_logs AS (\n        SELECT \n            s.*,\n            c.data_processed_sum_tb / s.runs_number * 5 AS cost_usd\n        FROM logs s\n        LEFT JOIN dev_benchmark.stg_synapse_consumption c ON c.log_file_name = s.source_file_name\n        WHERE s.technology_name == 'synapse'\n    )\n\n    SELECT \n        *\n    FROM databricks_logs\n    UNION\n    SELECT \n        *\n    FROM synapse_logs\n\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.agg_1tb_with_pricing"}, "model.benchmark_analysis.fact_performance_logs": {"raw_sql": "{{ config(\n    \n    materialized='table',\n    incremental_strategy='insert_overwrite',\n    file_format='delta'\n    \n) }}\n\n{# location_root='/mnt/vmdatalake/results/', #}\n{# Had some issues with SQL Analytics and location. Hence, database was created prior with a specified location #}\n\n\nSELECT \n    l.*,\n    ROW_NUMBER() OVER(PARTITION BY l.query_label, l.source_file_name ORDER BY l.date_time ASC) AS run_id,\n    {{ dbt_utils.current_timestamp() }} AS dbt_execution_date\nFROM {{ ref('stg_jmeter_logs') }} l\nINNER JOIN {{ ref('queries_snapshot') }} q ON l.query_label = q.label\nWHERE q.is_included_in_perf_analysis == 'TRUE' \n    AND q.dbt_valid_to IS NULL\n\nORDER BY l.source_file_name, l.query_label, l.date_time", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.persist_docs"], "nodes": ["model.benchmark_analysis.stg_jmeter_logs", "snapshot.benchmark_analysis.queries_snapshot"]}, "config": {"enabled": true, "materialized": "table", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "file_format": "delta", "incremental_strategy": "insert_overwrite", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "core", "fact_performance_logs"], "unique_id": "model.benchmark_analysis.fact_performance_logs", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "core/fact_performance_logs.sql", "original_file_path": "models/core/fact_performance_logs.sql", "name": "fact_performance_logs", "alias": "fact_performance_logs", "checksum": {"name": "sha256", "checksum": "f54b5fe1c9bd2d30ae9c048e97ec1ae6fa2846a237adaacf1d56ffad8d3e977f"}, "tags": [], "refs": [["stg_jmeter_logs"], ["queries_snapshot"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/core/fact_performance_logs.sql", "build_path": "target/run/benchmark_analysis/models/core/fact_performance_logs.sql", "deferred": false, "unrendered_config": {"materialized": "table", "incremental_strategy": "insert_overwrite", "file_format": "delta"}, "created_at": 1627989867, "compiled_sql": "\n\n\n\n\n\nSELECT \n    l.*,\n    ROW_NUMBER() OVER(PARTITION BY l.query_label, l.source_file_name ORDER BY l.date_time ASC) AS run_id,\n    \n    current_timestamp::\n    timestamp\n\n AS dbt_execution_date\nFROM dev_benchmark.stg_jmeter_logs l\nINNER JOIN dev_benchmark.queries_snapshot q ON l.query_label = q.label\nWHERE q.is_included_in_perf_analysis == 'TRUE' \n    AND q.dbt_valid_to IS NULL\n\nORDER BY l.source_file_name, l.query_label, l.date_time", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.fact_performance_logs"}, "model.benchmark_analysis.stg_allowed_queries": {"raw_sql": "SELECT \n    {{ dbt_utils.star(ref('allowed_queries')) }}\nFROM {{ ref('allowed_queries') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt.create_or_replace_view"], "nodes": ["seed.benchmark_analysis.allowed_queries", "seed.benchmark_analysis.allowed_queries"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "staging", "stg_allowed_queries"], "unique_id": "model.benchmark_analysis.stg_allowed_queries", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "staging/stg_allowed_queries.sql", "original_file_path": "models/staging/stg_allowed_queries.sql", "name": "stg_allowed_queries", "alias": "stg_allowed_queries", "checksum": {"name": "sha256", "checksum": "e62652c98d42d295e4c51fd287c7882cef646a9143dedc71604f97363f40b858"}, "tags": [], "refs": [["allowed_queries"], ["allowed_queries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/staging/stg_allowed_queries.sql", "build_path": "target/run/benchmark_analysis/models/staging/stg_allowed_queries.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1627989867, "compiled_sql": "SELECT \n    `id`,\n  `label`,\n  `is_included_in_perf_analysis`,\n  `exclusion_reason`,\n  `updated_at`\nFROM dev_benchmark_raw.allowed_queries", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.stg_allowed_queries"}, "model.benchmark_analysis.stg_databricks_clusters": {"raw_sql": "SELECT \n    {{ dbt_utils.star(ref('databricks_clusters')) }}\nFROM {{ ref('databricks_clusters') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt.create_or_replace_view"], "nodes": ["seed.benchmark_analysis.databricks_clusters", "seed.benchmark_analysis.databricks_clusters"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "staging", "stg_databricks_clusters"], "unique_id": "model.benchmark_analysis.stg_databricks_clusters", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "staging/stg_databricks_clusters.sql", "original_file_path": "models/staging/stg_databricks_clusters.sql", "name": "stg_databricks_clusters", "alias": "stg_databricks_clusters", "checksum": {"name": "sha256", "checksum": "018391d6089c1aa248022c7e1a165cc7c8c87fb94cbad0dcd4cf10e03d24ab7a"}, "tags": [], "refs": [["databricks_clusters"], ["databricks_clusters"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/staging/stg_databricks_clusters.sql", "build_path": "target/run/benchmark_analysis/models/staging/stg_databricks_clusters.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1627989867, "compiled_sql": "SELECT \n    `cluster_type`,\n  `cluster_dbu_count`,\n  `hourly_dbu_total_cost`,\n  `hourly_azure_vm_total_cost`,\n  `hourly_combined_cost`\nFROM dev_benchmark_raw.databricks_clusters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.stg_databricks_clusters"}, "model.benchmark_analysis.stg_jmeter_logs": {"raw_sql": "{% set seed_database_postfix = 'raw' %}\n\nWITH databricks_logs AS (\n    {{ dbt_utils.union_relations(\n        relations= get_dbr_relations_by_pattern(\n            'databricks_analytics*', \n            schema=target.schema ~ '_' ~ seed_database_postfix),\n        include=['timeStamp', 'elapsed', 'label', 'success', 'threadName']\n    ) }}\n\n),\nsynapse_logs AS (\n    {{ dbt_utils.union_relations(\n        relations= get_dbr_relations_by_pattern(\n            'synapse*', \n            schema=target.schema ~ '_' ~ seed_database_postfix),\n        include=['timeStamp', 'elapsed', 'label', 'success', 'threadName']\n    ) }}\n\n),\nunioned_logs (\n    SELECT * FROM databricks_logs\n    UNION ALL\n    SELECT * FROM synapse_logs\n),\nlogs_with_source_file_info(\n    SELECT \n        u.*,\n        lcase(replace(u._dbt_source_relation,'{{ target.schema ~ \"_\" ~ seed_database_postfix ~ \".\" }}','')) AS source_file_name\n    FROM unioned_logs u\n)\n\n\nSELECT\n    l.timeStamp as log_id,\n    date_format(timestamp_millis(l.timeStamp), 'yyyy-MM-dd HH:mm:ss.SSS' ) as date_time,\n    l.label AS query_label,\n    l.elapsed AS elapsed_ms,\n    l.elapsed / 1000 AS elapsed_sec,\n    l.elapsed / 1000 / 60 AS elapsed_min,\n    l.elapsed / 1000 / 3600 AS elapsed_hour,\n    like(l.source_file_name, '%partitioned%') AS is_partitioned, \n    like(l.source_file_name, '%parquet%') AS is_parquet, \n    regexp_extract(\n        l.source_file_name, \n        '([0-9]+gb|[0-9]+tb)', 1) \n        AS data_size,  \n    regexp_extract(\n        l.source_file_name,\n        '^([^_]+)', 1) \n        AS technology_name,\n    l.success,\n    l.threadName AS jmeter_thread_name,\n    l.source_file_name\nFROM logs_with_source_file_info l", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.get_dbr_relations_by_pattern", "macro.dbt_utils.union_relations", "macro.dbt.create_or_replace_view"], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "staging", "stg_jmeter_logs"], "unique_id": "model.benchmark_analysis.stg_jmeter_logs", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "staging/stg_jmeter_logs.sql", "original_file_path": "models/staging/stg_jmeter_logs.sql", "name": "stg_jmeter_logs", "alias": "stg_jmeter_logs", "checksum": {"name": "sha256", "checksum": "c20fb73fee1466a539257d46e217dff5c65eff163e68c371fe22355189ee33a0"}, "tags": [], "refs": [], "sources": [], "description": "Aggregated all test runs", "columns": {"log_id": {"name": "log_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "benchmark_analysis://models/staging/schema.yml", "compiled_path": "target/compiled/benchmark_analysis/models/staging/stg_jmeter_logs.sql", "build_path": "target/run/benchmark_analysis/models/staging/stg_jmeter_logs.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1627989868, "compiled_sql": "\n\nWITH databricks_logs AS (\n    \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_delta_2xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_delta_2xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_delta_partitioned_2xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_delta_partitioned_2xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_delta_partitioned_small' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_delta_partitioned_small\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_delta_partitioned_xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_delta_partitioned_xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_delta_small' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_delta_small\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_delta_xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_delta_xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_parquet_2xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_parquet_2xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_parquet_partitioned_2xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_parquet_partitioned_2xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_parquet_partitioned_small' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_parquet_partitioned_small\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_parquet_partitioned_xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_parquet_partitioned_xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_parquet_small' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_parquet_small\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_10gb_parquet_xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_10gb_parquet_xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1gb_delta_2xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1gb_delta_2xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1gb_delta_small' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1gb_delta_small\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1gb_delta_xsmall' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1gb_delta_xsmall\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1tb_delta_large' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1tb_delta_large\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1tb_delta_medium' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1tb_delta_medium\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1tb_delta_partitioned_large' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1tb_delta_partitioned_large\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1tb_delta_partitioned_medium' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1tb_delta_partitioned_medium\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1tb_delta_partitioned_small' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1tb_delta_partitioned_small\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1tb_delta_small' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1tb_delta_small\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1tb_parquet_large' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1tb_parquet_large\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1tb_parquet_medium' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1tb_parquet_medium\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.databricks_analytics_1tb_parquet_small' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.databricks_analytics_1tb_parquet_small\n        )\n\n        \n\n),\nsynapse_logs AS (\n    \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_10gb_delta' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_10gb_delta\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_10gb_delta_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_10gb_delta_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_10gb_delta_partitioned_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_10gb_delta_partitioned_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_10gb_parquet_external' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_10gb_parquet_external\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_10gb_parquet_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_10gb_parquet_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_10gb_parquet_partitioned_external' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_10gb_parquet_partitioned_external\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_10gb_parquet_partitioned_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_10gb_parquet_partitioned_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_1gb_delta_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_1gb_delta_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_1gb_parquet_external' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_1gb_parquet_external\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_1gb_parquet_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_1gb_parquet_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_1tb_delta_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_1tb_delta_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.synapse_1tb_parquet_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`timeStamp` as long) as `timeStamp` ,\n                    cast(`elapsed` as long) as `elapsed` ,\n                    cast(`label` as string) as `label` ,\n                    cast(`threadName` as string) as `threadName` ,\n                    cast(`success` as boolean) as `success` \n\n            from dev_benchmark_raw.synapse_1tb_parquet_openrowset\n        )\n\n        \n\n),\nunioned_logs (\n    SELECT * FROM databricks_logs\n    UNION ALL\n    SELECT * FROM synapse_logs\n),\nlogs_with_source_file_info(\n    SELECT \n        u.*,\n        lcase(replace(u._dbt_source_relation,'dev_benchmark_raw.','')) AS source_file_name\n    FROM unioned_logs u\n)\n\n\nSELECT\n    l.timeStamp as log_id,\n    date_format(timestamp_millis(l.timeStamp), 'yyyy-MM-dd HH:mm:ss.SSS' ) as date_time,\n    l.label AS query_label,\n    l.elapsed AS elapsed_ms,\n    l.elapsed / 1000 AS elapsed_sec,\n    l.elapsed / 1000 / 60 AS elapsed_min,\n    l.elapsed / 1000 / 3600 AS elapsed_hour,\n    like(l.source_file_name, '%partitioned%') AS is_partitioned, \n    like(l.source_file_name, '%parquet%') AS is_parquet, \n    regexp_extract(\n        l.source_file_name, \n        '([0-9]+gb|[0-9]+tb)', 1) \n        AS data_size,  \n    regexp_extract(\n        l.source_file_name,\n        '^([^_]+)', 1) \n        AS technology_name,\n    l.success,\n    l.threadName AS jmeter_thread_name,\n    l.source_file_name\nFROM logs_with_source_file_info l", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.stg_jmeter_logs"}, "model.benchmark_analysis.stg_run_info": {"raw_sql": "SELECT \n    {{ dbt_utils.star(ref('run_info')) }}\nFROM {{ ref('run_info') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt.create_or_replace_view"], "nodes": ["seed.benchmark_analysis.run_info", "seed.benchmark_analysis.run_info"]}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "staging", "stg_run_info"], "unique_id": "model.benchmark_analysis.stg_run_info", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "staging/stg_run_info.sql", "original_file_path": "models/staging/stg_run_info.sql", "name": "stg_run_info", "alias": "stg_run_info", "checksum": {"name": "sha256", "checksum": "0201ab4e74a8a63813ee97a7c9cd8f034e0e584b3a6b967dd54b72136d00a9b0"}, "tags": [], "refs": [["run_info"], ["run_info"]], "sources": [], "description": "Information about all test runs", "columns": {"id": {"name": "id", "description": "The primary key for this table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_file_name": {"name": "run_file_name", "description": "file name", "meta": {}, "data_type": null, "quote": null, "tags": []}, "friendly_name": {"name": "friendly_name", "description": "friendly name visible in reports", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "benchmark_analysis://models/staging/schema.yml", "compiled_path": "target/compiled/benchmark_analysis/models/staging/stg_run_info.sql", "build_path": "target/run/benchmark_analysis/models/staging/stg_run_info.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1627989868, "compiled_sql": "SELECT \n    `id`,\n  `run_file_name`,\n  `friendly_name`,\n  `description`,\n  `updated_at`\nFROM dev_benchmark_raw.run_info", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.stg_run_info"}, "model.benchmark_analysis.stg_synapse_consumption": {"raw_sql": "{% set seed_database_postfix = 'raw' %}\n\nWITH unioned_synapse_consumption AS (\n    {{ dbt_utils.union_relations(\n        relations= get_dbr_relations_by_pattern(\n            'consumption_synapse_*', \n            schema=target.schema ~ '_' ~ seed_database_postfix),\n        include=['RequestID', 'SubmitTime', 'Duration', 'DataProcessed', 'Submitter', 'Status']\n    ) }}\n\n),\nrenamed_consumption AS (\n    SELECT \n        lcase(\n            replace(\n                l._dbt_source_relation,\n                '{{ target.schema ~ \"_raw.\" }}',''\n                )\n            ) AS source_file_name,\n        regexp_extract(\n            l.DataProcessed,\n            '(^[0-9]+\\.[0-9]+)', 1) \n            AS data_processed,\n        regexp_extract(\n            lcase(l.DataProcessed), \n            '(mb|gb|tb)', 1) \n            AS data_size_abbr, \n        l.RequestID AS request_id,\n        l.SubmitTime AS submit_date,\n        l.Duration AS duration,\n        l.Submitter AS submitter\n    FROM unioned_synapse_consumption l\n\n),\nunified_data_size AS (\n    SELECT \n        c.*,\n        CASE data_size_abbr \n            WHEN 'mb' THEN data_processed / 1000000\n            WHEN 'gb' THEN data_processed / 1000\n            ELSE data_processed \n        END AS data_processed_unified\n    FROM renamed_consumption c\n)\n\nSELECT \n    c.source_file_name,\n    replace(\n            c.source_file_name,\n            'consumption_',\n            ''\n            ) AS log_file_name,\n    c.submitter,\n    SUM(c.data_processed_unified) AS data_processed_sum_tb,\n    SUM(c.duration) AS duration_sum\nFROM unified_data_size c\nGROUP BY c.source_file_name, c.submitter", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.benchmark_analysis.get_dbr_relations_by_pattern", "macro.dbt_utils.union_relations", "macro.dbt.create_or_replace_view"], "nodes": []}, "config": {"enabled": true, "materialized": "view", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "staging", "stg_synapse_consumption"], "unique_id": "model.benchmark_analysis.stg_synapse_consumption", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "staging/stg_synapse_consumption.sql", "original_file_path": "models/staging/stg_synapse_consumption.sql", "name": "stg_synapse_consumption", "alias": "stg_synapse_consumption", "checksum": {"name": "sha256", "checksum": "69551073fb94b5670866a91fba433a938a48a56fe06a25068688474c63bc4a6f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/benchmark_analysis/models/staging/stg_synapse_consumption.sql", "build_path": "target/run/benchmark_analysis/models/staging/stg_synapse_consumption.sql", "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1627989868, "compiled_sql": "\n\nWITH unioned_synapse_consumption AS (\n    \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_10gb_delta' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_10gb_delta\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_10gb_delta_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_10gb_delta_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_10gb_delta_partitioned_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_10gb_delta_partitioned_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_10gb_parquet_external' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_10gb_parquet_external\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_10gb_parquet_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_10gb_parquet_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_10gb_parquet_partitioned_external' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_10gb_parquet_partitioned_external\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_10gb_parquet_partitioned_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_10gb_parquet_partitioned_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_1gb_delta_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_1gb_delta_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_1gb_parquet_external' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_1gb_parquet_external\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_1gb_parquet_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_1gb_parquet_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_1tb_delta_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_1tb_delta_openrowset\n        )\n\n        union all\n        \n\n        (\n            select\n\n                cast('dev_benchmark_raw.consumption_synapse_1tb_parquet_openrowset' as \n    string\n) as _dbt_source_relation,\n                \n                    cast(`RequestID` as long) as `RequestID` ,\n                    cast(`SubmitTime` as string) as `SubmitTime` ,\n                    cast(`Duration` as string) as `Duration` ,\n                    cast(`DataProcessed` as string) as `DataProcessed` ,\n                    cast(`Submitter` as string) as `Submitter` ,\n                    cast(`Status` as string) as `Status` \n\n            from dev_benchmark_raw.consumption_synapse_1tb_parquet_openrowset\n        )\n\n        \n\n),\nrenamed_consumption AS (\n    SELECT \n        lcase(\n            replace(\n                l._dbt_source_relation,\n                'dev_benchmark_raw.',''\n                )\n            ) AS source_file_name,\n        regexp_extract(\n            l.DataProcessed,\n            '(^[0-9]+\\.[0-9]+)', 1) \n            AS data_processed,\n        regexp_extract(\n            lcase(l.DataProcessed), \n            '(mb|gb|tb)', 1) \n            AS data_size_abbr, \n        l.RequestID AS request_id,\n        l.SubmitTime AS submit_date,\n        l.Duration AS duration,\n        l.Submitter AS submitter\n    FROM unioned_synapse_consumption l\n\n),\nunified_data_size AS (\n    SELECT \n        c.*,\n        CASE data_size_abbr \n            WHEN 'mb' THEN data_processed / 1000000\n            WHEN 'gb' THEN data_processed / 1000\n            ELSE data_processed \n        END AS data_processed_unified\n    FROM renamed_consumption c\n)\n\nSELECT \n    c.source_file_name,\n    replace(\n            c.source_file_name,\n            'consumption_',\n            ''\n            ) AS log_file_name,\n    c.submitter,\n    SUM(c.data_processed_unified) AS data_processed_sum_tb,\n    SUM(c.duration) AS duration_sum\nFROM unified_data_size c\nGROUP BY c.source_file_name, c.submitter", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "dev_benchmark.stg_synapse_consumption"}, "snapshot.benchmark_analysis.queries_snapshot": {"raw_sql": "\n\n{{\n    config(\n      target_schema=target.schema,\n      unique_key='id',\n      strategy='timestamp',\n      updated_at='updated_at',\n      file_format='delta'\n    )\n}}\n\nselect * from {{ ref('stg_allowed_queries') }}\n\n", "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.benchmark_analysis.stg_allowed_queries"]}, "config": {"enabled": true, "materialized": "snapshot", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": null, "database": null, "tags": [], "full_refresh": null, "strategy": "timestamp", "unique_key": "id", "target_schema": "dev_benchmark", "target_database": null, "updated_at": "updated_at", "check_cols": null, "file_format": "delta", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark", "fqn": ["benchmark_analysis", "queries_snapshot", "queries_snapshot"], "unique_id": "snapshot.benchmark_analysis.queries_snapshot", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "queries_snapshot.sql", "original_file_path": "snapshots/queries_snapshot.sql", "name": "queries_snapshot", "alias": "queries_snapshot", "checksum": {"name": "sha256", "checksum": "e7c1b0c003712c93c4cf3cb4de939403c8f853c3cb9c23799658b485e572cf96"}, "tags": [], "refs": [["stg_allowed_queries"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_schema": "dev_benchmark", "unique_key": "id", "strategy": "timestamp", "updated_at": "updated_at", "file_format": "delta"}, "created_at": 1627989868}, "seed.benchmark_analysis.allowed_queries": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "config", "allowed_queries"], "unique_id": "seed.benchmark_analysis.allowed_queries", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "config/allowed_queries.csv", "original_file_path": "data/config/allowed_queries.csv", "name": "allowed_queries", "alias": "allowed_queries", "checksum": {"name": "sha256", "checksum": "f8f19f8b67628ea558404a6ed9ab2f719ed903dc9ed5df0d1ad8b3992c60c724"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.run_info": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "config", "run_info"], "unique_id": "seed.benchmark_analysis.run_info", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "config/run_info.csv", "original_file_path": "data/config/run_info.csv", "name": "run_info", "alias": "run_info", "checksum": {"name": "sha256", "checksum": "73637ceb4ff479accc2a9941951ba24f012553677e4696888334e00fa054bb21"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_clusters": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "databricks", "databricks_clusters"], "unique_id": "seed.benchmark_analysis.databricks_clusters", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "databricks/databricks_clusters.csv", "original_file_path": "data/databricks/databricks_clusters.csv", "name": "databricks_clusters", "alias": "databricks_clusters", "checksum": {"name": "sha256", "checksum": "e799915c0bef09f746d0d860dad3b43e948dfc4f34ece9eae792b7ba6c2acd9f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_delta_2xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_delta_2xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_delta_2xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_delta_2xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_delta_2xsmall.csv", "name": "databricks_analytics_10gb_delta_2xsmall", "alias": "databricks_analytics_10gb_delta_2xsmall", "checksum": {"name": "sha256", "checksum": "792f060dfdb0913ce7194a3b83b070117455f5099ccdcb1bff58628d0594ccb1"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_2xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_delta_partitioned_2xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_2xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_delta_partitioned_2xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_delta_partitioned_2xsmall.csv", "name": "databricks_analytics_10gb_delta_partitioned_2xsmall", "alias": "databricks_analytics_10gb_delta_partitioned_2xsmall", "checksum": {"name": "sha256", "checksum": "e0d2ec43f82934758e9ba21f8fac928cb67693ebc6b4067102c6e589cab77376"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_small": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_delta_partitioned_small"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_small", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_delta_partitioned_small.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_delta_partitioned_small.csv", "name": "databricks_analytics_10gb_delta_partitioned_small", "alias": "databricks_analytics_10gb_delta_partitioned_small", "checksum": {"name": "sha256", "checksum": "c614b04c6cf7ce3854b985fee2e6d6653b15636c761b38b52c78aaf0cc7f96cc"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_delta_partitioned_xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_delta_partitioned_xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_delta_partitioned_xsmall.csv", "name": "databricks_analytics_10gb_delta_partitioned_xsmall", "alias": "databricks_analytics_10gb_delta_partitioned_xsmall", "checksum": {"name": "sha256", "checksum": "18cde4a0de7d69d349aa8b07f0bc477eb0cf7863610366d408f9e5f94ca6be5b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_delta_small": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_delta_small"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_delta_small", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_delta_small.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_delta_small.csv", "name": "databricks_analytics_10gb_delta_small", "alias": "databricks_analytics_10gb_delta_small", "checksum": {"name": "sha256", "checksum": "75bf0e493ebbf1ebb6e9ef0b894bf1c1a4a3fb4dbd808fb520fb38196c259d62"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_delta_xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_delta_xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_delta_xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_delta_xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_delta_xsmall.csv", "name": "databricks_analytics_10gb_delta_xsmall", "alias": "databricks_analytics_10gb_delta_xsmall", "checksum": {"name": "sha256", "checksum": "0761ea5f74224ee8bda6c253115e844ed0220b699dbb1403ef540b0e7c91f429"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_parquet_2xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_parquet_2xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_parquet_2xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_parquet_2xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_parquet_2xsmall.csv", "name": "databricks_analytics_10gb_parquet_2xsmall", "alias": "databricks_analytics_10gb_parquet_2xsmall", "checksum": {"name": "sha256", "checksum": "4b1b7e0fab63bc9a0030d5d1ae59449cb37cc625dcca5f68f5fa029d427d878d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_2xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_parquet_partitioned_2xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_2xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_parquet_partitioned_2xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_parquet_partitioned_2xsmall.csv", "name": "databricks_analytics_10gb_parquet_partitioned_2xsmall", "alias": "databricks_analytics_10gb_parquet_partitioned_2xsmall", "checksum": {"name": "sha256", "checksum": "b13729120d707201374863dc9bbebadb0a749db863b18332263d591a3b86d47f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_small": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_parquet_partitioned_small"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_small", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_parquet_partitioned_small.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_parquet_partitioned_small.csv", "name": "databricks_analytics_10gb_parquet_partitioned_small", "alias": "databricks_analytics_10gb_parquet_partitioned_small", "checksum": {"name": "sha256", "checksum": "9f64b103e5db1fc8d4010ddfa98c80bc4ff7c9121d476adf22411caa6e976c64"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_parquet_partitioned_xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_parquet_partitioned_xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_parquet_partitioned_xsmall.csv", "name": "databricks_analytics_10gb_parquet_partitioned_xsmall", "alias": "databricks_analytics_10gb_parquet_partitioned_xsmall", "checksum": {"name": "sha256", "checksum": "6d20a854d12dbf45275f3b82013642e3741c1882e24ac15f37a083424c8ba4d4"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_parquet_small": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_parquet_small"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_parquet_small", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_parquet_small.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_parquet_small.csv", "name": "databricks_analytics_10gb_parquet_small", "alias": "databricks_analytics_10gb_parquet_small", "checksum": {"name": "sha256", "checksum": "22de9de0e9579e9a5be7bad21a3d00e3250bae993a88cb7b3f8f12f5eac53c3a"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_10gb_parquet_xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_10gb_parquet_xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_10gb_parquet_xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_10gb_parquet_xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_10gb_parquet_xsmall.csv", "name": "databricks_analytics_10gb_parquet_xsmall", "alias": "databricks_analytics_10gb_parquet_xsmall", "checksum": {"name": "sha256", "checksum": "865cf93760d820c131c23ee1fa4c3c13fa7314c8e86fac9a4d5aa1c7aed6fe51"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1gb_delta_2xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1gb_delta_2xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1gb_delta_2xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1gb_delta_2xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1gb_delta_2xsmall.csv", "name": "databricks_analytics_1gb_delta_2xsmall", "alias": "databricks_analytics_1gb_delta_2xsmall", "checksum": {"name": "sha256", "checksum": "73361566c6ae8603ae6db46280e73c396e0d2f7ca0d56e20bb188a69809dcc74"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1gb_delta_small": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1gb_delta_small"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1gb_delta_small", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1gb_delta_small.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1gb_delta_small.csv", "name": "databricks_analytics_1gb_delta_small", "alias": "databricks_analytics_1gb_delta_small", "checksum": {"name": "sha256", "checksum": "180f66bd2cf9237f973fd2e0195e27fcc0e6e0be4e2206c32102ed82e18bab1b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1gb_delta_xsmall": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1gb_delta_xsmall"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1gb_delta_xsmall", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1gb_delta_xsmall.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1gb_delta_xsmall.csv", "name": "databricks_analytics_1gb_delta_xsmall", "alias": "databricks_analytics_1gb_delta_xsmall", "checksum": {"name": "sha256", "checksum": "5ace1efd82a3f72e73a570dffa891eca8b5a8aadc7854cc29b729db811462fab"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_delta_large": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_delta_large"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_delta_large", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_delta_large.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_delta_large.csv", "name": "databricks_analytics_1tb_delta_large", "alias": "databricks_analytics_1tb_delta_large", "checksum": {"name": "sha256", "checksum": "ec1fdf565a353b2ea72d91e6679b1b3467b3d9091ddb5d3b2a0ecc2f7e1d1832"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_delta_medium": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_delta_medium"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_delta_medium", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_delta_medium.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_delta_medium.csv", "name": "databricks_analytics_1tb_delta_medium", "alias": "databricks_analytics_1tb_delta_medium", "checksum": {"name": "sha256", "checksum": "1196a6d3e4ae7c812d52c8c6959ba98f7d5295f38a8b7df0813ba0e4cff26722"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_large": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_delta_partitioned_large"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_large", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_delta_partitioned_large.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_delta_partitioned_large.csv", "name": "databricks_analytics_1tb_delta_partitioned_large", "alias": "databricks_analytics_1tb_delta_partitioned_large", "checksum": {"name": "sha256", "checksum": "6fe294f1b93ab16c5f60035bfaed68b25665030f679bfe67a217924b88e0f284"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_medium": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_delta_partitioned_medium"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_medium", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_delta_partitioned_medium.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_delta_partitioned_medium.csv", "name": "databricks_analytics_1tb_delta_partitioned_medium", "alias": "databricks_analytics_1tb_delta_partitioned_medium", "checksum": {"name": "sha256", "checksum": "6e4bd5ab6979549c94860d14b10734e850ba747e12c348ce0957adc49c7922e0"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_small": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_delta_partitioned_small"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_small", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_delta_partitioned_small.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_delta_partitioned_small.csv", "name": "databricks_analytics_1tb_delta_partitioned_small", "alias": "databricks_analytics_1tb_delta_partitioned_small", "checksum": {"name": "sha256", "checksum": "b24e26275919d8876d91f4583f17780437e8cdbcb753d6797a75641efec46929"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_delta_small": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_delta_small"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_delta_small", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_delta_small.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_delta_small.csv", "name": "databricks_analytics_1tb_delta_small", "alias": "databricks_analytics_1tb_delta_small", "checksum": {"name": "sha256", "checksum": "6c37e7aa21e0e8cc359520ccbb34b6b721328978dd24fc97240cc61fefe849b3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_parquet_large": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_parquet_large"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_parquet_large", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_parquet_large.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_parquet_large.csv", "name": "databricks_analytics_1tb_parquet_large", "alias": "databricks_analytics_1tb_parquet_large", "checksum": {"name": "sha256", "checksum": "e4830fb4ca88d44d10e040a26ed39762976ae7f2627a1f09b31236db73757fe3"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_parquet_medium": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_parquet_medium"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_parquet_medium", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_parquet_medium.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_parquet_medium.csv", "name": "databricks_analytics_1tb_parquet_medium", "alias": "databricks_analytics_1tb_parquet_medium", "checksum": {"name": "sha256", "checksum": "56f2baaf1ee9020bfb21f3dc0cb0b884aea94118700417fa9b9d34a8fc8ebacd"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_parquet_partitioned_large": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_parquet_partitioned_large"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_parquet_partitioned_large", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_parquet_partitioned_large.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_parquet_partitioned_large.csv", "name": "databricks_analytics_1tb_parquet_partitioned_large", "alias": "databricks_analytics_1tb_parquet_partitioned_large", "checksum": {"name": "sha256", "checksum": "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.databricks_analytics_1tb_parquet_small": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "databricks_analytics_1tb_parquet_small"], "unique_id": "seed.benchmark_analysis.databricks_analytics_1tb_parquet_small", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/databricks_analytics_1tb_parquet_small.csv", "original_file_path": "data/jmeter_logs/databricks_analytics_1tb_parquet_small.csv", "name": "databricks_analytics_1tb_parquet_small", "alias": "databricks_analytics_1tb_parquet_small", "checksum": {"name": "sha256", "checksum": "6f2b3be93843f8cad4214426b8822f6f65d8b39db9e9395a9d5947745b64fb7c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_10gb_delta": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_10gb_delta"], "unique_id": "seed.benchmark_analysis.synapse_10gb_delta", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_10gb_delta.csv", "original_file_path": "data/jmeter_logs/synapse_10gb_delta.csv", "name": "synapse_10gb_delta", "alias": "synapse_10gb_delta", "checksum": {"name": "sha256", "checksum": "36ca34baa4b1f97d2a696b2217bc98e0c616779ab3a927243870bb5a0796d628"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_10gb_delta_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_10gb_delta_openrowset"], "unique_id": "seed.benchmark_analysis.synapse_10gb_delta_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_10gb_delta_openrowset.csv", "original_file_path": "data/jmeter_logs/synapse_10gb_delta_openrowset.csv", "name": "synapse_10gb_delta_openrowset", "alias": "synapse_10gb_delta_openrowset", "checksum": {"name": "sha256", "checksum": "bdcaba2570c3684d2f2fb6adb616c38e98369dab20e8ceb2290255f22eefa0cb"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_10gb_delta_partitioned_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_10gb_delta_partitioned_openrowset"], "unique_id": "seed.benchmark_analysis.synapse_10gb_delta_partitioned_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_10gb_delta_partitioned_openrowset.csv", "original_file_path": "data/jmeter_logs/synapse_10gb_delta_partitioned_openrowset.csv", "name": "synapse_10gb_delta_partitioned_openrowset", "alias": "synapse_10gb_delta_partitioned_openrowset", "checksum": {"name": "sha256", "checksum": "2d2414f26ceb3c4afb20f5ddbd4ab76155ca28d381e47da0abd772de7c4e04a9"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_10gb_parquet_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_10gb_parquet_openrowset"], "unique_id": "seed.benchmark_analysis.synapse_10gb_parquet_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_10gb_parquet_openrowset.csv", "original_file_path": "data/jmeter_logs/synapse_10gb_parquet_openrowset.csv", "name": "synapse_10gb_parquet_openrowset", "alias": "synapse_10gb_parquet_openrowset", "checksum": {"name": "sha256", "checksum": "af90d79991863c25081996c03838a2e54d79e6c560d67d704cadcd801317adaa"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_10gb_parquet_partitioned_external": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_10gb_parquet_partitioned_external"], "unique_id": "seed.benchmark_analysis.synapse_10gb_parquet_partitioned_external", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_10gb_parquet_partitioned_external.csv", "original_file_path": "data/jmeter_logs/synapse_10gb_parquet_partitioned_external.csv", "name": "synapse_10gb_parquet_partitioned_external", "alias": "synapse_10gb_parquet_partitioned_external", "checksum": {"name": "sha256", "checksum": "2fc58e587e99af7f1f29c74707b861af51ca8e4b1471f784d0c77159032a0335"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_10gb_parquet_partitioned_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_10gb_parquet_partitioned_openrowset"], "unique_id": "seed.benchmark_analysis.synapse_10gb_parquet_partitioned_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_10gb_parquet_partitioned_openrowset.csv", "original_file_path": "data/jmeter_logs/synapse_10gb_parquet_partitioned_openrowset.csv", "name": "synapse_10gb_parquet_partitioned_openrowset", "alias": "synapse_10gb_parquet_partitioned_openrowset", "checksum": {"name": "sha256", "checksum": "10c2ceea0026d742c24c4dca377d8eb429977d44f49c9792eb2201c02ef6539e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_1gb_delta_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_1gb_delta_openrowset"], "unique_id": "seed.benchmark_analysis.synapse_1gb_delta_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_1gb_delta_openrowset.csv", "original_file_path": "data/jmeter_logs/synapse_1gb_delta_openrowset.csv", "name": "synapse_1gb_delta_openrowset", "alias": "synapse_1gb_delta_openrowset", "checksum": {"name": "sha256", "checksum": "aa27a0124ab5eeac418dd09b29592ce113d7ee6324def5a8ddbedb8d2d3f40be"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_1gb_parquet_external": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_1gb_parquet_external"], "unique_id": "seed.benchmark_analysis.synapse_1gb_parquet_external", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_1gb_parquet_external.csv", "original_file_path": "data/jmeter_logs/synapse_1gb_parquet_external.csv", "name": "synapse_1gb_parquet_external", "alias": "synapse_1gb_parquet_external", "checksum": {"name": "sha256", "checksum": "af51060e1717311710b2eba714e334a1e1bc390fe0765a02b8ff98a73b232990"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_1gb_parquet_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_1gb_parquet_openrowset"], "unique_id": "seed.benchmark_analysis.synapse_1gb_parquet_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_1gb_parquet_openrowset.csv", "original_file_path": "data/jmeter_logs/synapse_1gb_parquet_openrowset.csv", "name": "synapse_1gb_parquet_openrowset", "alias": "synapse_1gb_parquet_openrowset", "checksum": {"name": "sha256", "checksum": "c88437e79fea622005e4efcef0763d2ce30626930e7b67034bc8810d25acb5de"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_1tb_delta_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_1tb_delta_openrowset"], "unique_id": "seed.benchmark_analysis.synapse_1tb_delta_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_1tb_delta_openrowset.csv", "original_file_path": "data/jmeter_logs/synapse_1tb_delta_openrowset.csv", "name": "synapse_1tb_delta_openrowset", "alias": "synapse_1tb_delta_openrowset", "checksum": {"name": "sha256", "checksum": "32725d0ddb203c46da1b82be185d1a6650fcf827a86880a9c06d3ef622d8462f"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.synapse_1tb_parquet_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "jmeter_logs", "synapse_1tb_parquet_openrowset"], "unique_id": "seed.benchmark_analysis.synapse_1tb_parquet_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "jmeter_logs/synapse_1tb_parquet_openrowset.csv", "original_file_path": "data/jmeter_logs/synapse_1tb_parquet_openrowset.csv", "name": "synapse_1tb_parquet_openrowset", "alias": "synapse_1tb_parquet_openrowset", "checksum": {"name": "sha256", "checksum": "fa34795b493bc7f565f12055b35c84eba009cc156e7686e7409278d70f1ac363"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_10gb_delta": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_10gb_delta"], "unique_id": "seed.benchmark_analysis.consumption_synapse_10gb_delta", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_10gb_delta.csv", "original_file_path": "data/synapse/consumption_synapse_10gb_delta.csv", "name": "consumption_synapse_10gb_delta", "alias": "consumption_synapse_10gb_delta", "checksum": {"name": "sha256", "checksum": "fd5d0c16313a70a1480ee3d1bbf0f6051cb8845890399f6c56d67082c4347efd"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_10gb_delta_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_10gb_delta_openrowset"], "unique_id": "seed.benchmark_analysis.consumption_synapse_10gb_delta_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_10gb_delta_openrowset.csv", "original_file_path": "data/synapse/consumption_synapse_10gb_delta_openrowset.csv", "name": "consumption_synapse_10gb_delta_openrowset", "alias": "consumption_synapse_10gb_delta_openrowset", "checksum": {"name": "sha256", "checksum": "d20bc888dcbdad297aa41bd82f78a5dc450a72d013968a89de26f5fc71c960c8"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_10gb_delta_partitioned_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_10gb_delta_partitioned_openrowset"], "unique_id": "seed.benchmark_analysis.consumption_synapse_10gb_delta_partitioned_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_10gb_delta_partitioned_openrowset.csv", "original_file_path": "data/synapse/consumption_synapse_10gb_delta_partitioned_openrowset.csv", "name": "consumption_synapse_10gb_delta_partitioned_openrowset", "alias": "consumption_synapse_10gb_delta_partitioned_openrowset", "checksum": {"name": "sha256", "checksum": "62f4a2f06f500db55e56a891c3338be36a6fe5af0361f51dd9cbedd6181b3413"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_10gb_parquet_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_10gb_parquet_openrowset"], "unique_id": "seed.benchmark_analysis.consumption_synapse_10gb_parquet_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_10gb_parquet_openrowset.csv", "original_file_path": "data/synapse/consumption_synapse_10gb_parquet_openrowset.csv", "name": "consumption_synapse_10gb_parquet_openrowset", "alias": "consumption_synapse_10gb_parquet_openrowset", "checksum": {"name": "sha256", "checksum": "b007b882427190ba899144e60cacb20e99feb401306f1738133138702d840422"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_10gb_parquet_partitioned_external": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_10gb_parquet_partitioned_external"], "unique_id": "seed.benchmark_analysis.consumption_synapse_10gb_parquet_partitioned_external", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_10gb_parquet_partitioned_external.csv", "original_file_path": "data/synapse/consumption_synapse_10gb_parquet_partitioned_external.csv", "name": "consumption_synapse_10gb_parquet_partitioned_external", "alias": "consumption_synapse_10gb_parquet_partitioned_external", "checksum": {"name": "sha256", "checksum": "fd43d2a4f9a43057e69f3478e0d5071a476e4a9c0d4cf5aaadf48afe72db093d"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_10gb_parquet_partitioned_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_10gb_parquet_partitioned_openrowset"], "unique_id": "seed.benchmark_analysis.consumption_synapse_10gb_parquet_partitioned_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_10gb_parquet_partitioned_openrowset.csv", "original_file_path": "data/synapse/consumption_synapse_10gb_parquet_partitioned_openrowset.csv", "name": "consumption_synapse_10gb_parquet_partitioned_openrowset", "alias": "consumption_synapse_10gb_parquet_partitioned_openrowset", "checksum": {"name": "sha256", "checksum": "04cf89fb11ec64fbf1f4f314787a4a3d06eee48b7038b0118559dba08a63f0db"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_1gb_delta_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_1gb_delta_openrowset"], "unique_id": "seed.benchmark_analysis.consumption_synapse_1gb_delta_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_1gb_delta_openrowset.csv", "original_file_path": "data/synapse/consumption_synapse_1gb_delta_openrowset.csv", "name": "consumption_synapse_1gb_delta_openrowset", "alias": "consumption_synapse_1gb_delta_openrowset", "checksum": {"name": "sha256", "checksum": "96b2bac7b93490f369b0ccc2ab4045a65ee875d2a688884012ac3527111966ac"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_1gb_parquet_external": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_1gb_parquet_external"], "unique_id": "seed.benchmark_analysis.consumption_synapse_1gb_parquet_external", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_1gb_parquet_external.csv", "original_file_path": "data/synapse/consumption_synapse_1gb_parquet_external.csv", "name": "consumption_synapse_1gb_parquet_external", "alias": "consumption_synapse_1gb_parquet_external", "checksum": {"name": "sha256", "checksum": "c9576d512b987edcdbd42530e304172539db41b7048d304a9415d31f19e9a4c0"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_1gb_parquet_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_1gb_parquet_openrowset"], "unique_id": "seed.benchmark_analysis.consumption_synapse_1gb_parquet_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_1gb_parquet_openrowset.csv", "original_file_path": "data/synapse/consumption_synapse_1gb_parquet_openrowset.csv", "name": "consumption_synapse_1gb_parquet_openrowset", "alias": "consumption_synapse_1gb_parquet_openrowset", "checksum": {"name": "sha256", "checksum": "ceb67672dd098b501cc0ed71ffdcd1561bda5a1b6761e9c62e6414e17dfc7473"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_1tb_delta_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_1tb_delta_openrowset"], "unique_id": "seed.benchmark_analysis.consumption_synapse_1tb_delta_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_1tb_delta_openrowset.csv", "original_file_path": "data/synapse/consumption_synapse_1tb_delta_openrowset.csv", "name": "consumption_synapse_1tb_delta_openrowset", "alias": "consumption_synapse_1tb_delta_openrowset", "checksum": {"name": "sha256", "checksum": "b4d467adb4cc7bb448deae64fee396c94d58fc7b04f4300bd87dbe139602d793"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "seed.benchmark_analysis.consumption_synapse_1tb_parquet_openrowset": {"raw_sql": "", "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "materialized": "seed", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "raw", "database": null, "tags": [], "full_refresh": null, "quote_columns": true, "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_raw", "fqn": ["benchmark_analysis", "synapse", "consumption_synapse_1tb_parquet_openrowset"], "unique_id": "seed.benchmark_analysis.consumption_synapse_1tb_parquet_openrowset", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "synapse/consumption_synapse_1tb_parquet_openrowset.csv", "original_file_path": "data/synapse/consumption_synapse_1tb_parquet_openrowset.csv", "name": "consumption_synapse_1tb_parquet_openrowset", "alias": "consumption_synapse_1tb_parquet_openrowset", "checksum": {"name": "sha256", "checksum": "9a7251662058ae796ccdb2671eee59d2710763f7e92cbae4914f3760ba6c892e"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "raw", "enabled": true, "quote_columns": true}, "created_at": 1627989868}, "test.benchmark_analysis.unique_stg_jmeter_logs_log_id.5b8aa7aaff": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "log_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_jmeter_logs') }} where {{config.get('where')}}) stg_jmeter_logs{% else %}{{ ref('stg_jmeter_logs') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.benchmark_analysis.stg_jmeter_logs"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_dbt_test__audit", "fqn": ["benchmark_analysis", "schema_test", "unique_stg_jmeter_logs_log_id"], "unique_id": "test.benchmark_analysis.unique_stg_jmeter_logs_log_id.5b8aa7aaff", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "schema_test/unique_stg_jmeter_logs_log_id.sql", "original_file_path": "models/staging/schema.yml", "name": "unique_stg_jmeter_logs_log_id", "alias": "unique_stg_jmeter_logs_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_jmeter_logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1627989868, "column_name": "log_id"}, "test.benchmark_analysis.not_null_stg_jmeter_logs_log_id.03927e5c5b": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "log_id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_jmeter_logs') }} where {{config.get('where')}}) stg_jmeter_logs{% else %}{{ ref('stg_jmeter_logs') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.benchmark_analysis.stg_jmeter_logs"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_dbt_test__audit", "fqn": ["benchmark_analysis", "schema_test", "not_null_stg_jmeter_logs_log_id"], "unique_id": "test.benchmark_analysis.not_null_stg_jmeter_logs_log_id.03927e5c5b", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "schema_test/not_null_stg_jmeter_logs_log_id.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg_jmeter_logs_log_id", "alias": "not_null_stg_jmeter_logs_log_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_jmeter_logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1627989868, "column_name": "log_id"}, "test.benchmark_analysis.unique_stg_run_info_id.7d9b473df6": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_run_info') }} where {{config.get('where')}}) stg_run_info{% else %}{{ ref('stg_run_info') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_dbt_test__audit", "fqn": ["benchmark_analysis", "schema_test", "unique_stg_run_info_id"], "unique_id": "test.benchmark_analysis.unique_stg_run_info_id.7d9b473df6", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "schema_test/unique_stg_run_info_id.sql", "original_file_path": "models/staging/schema.yml", "name": "unique_stg_run_info_id", "alias": "unique_stg_run_info_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1627989868, "column_name": "id"}, "test.benchmark_analysis.not_null_stg_run_info_id.7a012bc9a3": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "id", "model": "{% if config.get('where') %}(select * from {{ ref('stg_run_info') }} where {{config.get('where')}}) stg_run_info{% else %}{{ ref('stg_run_info') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_dbt_test__audit", "fqn": ["benchmark_analysis", "schema_test", "not_null_stg_run_info_id"], "unique_id": "test.benchmark_analysis.not_null_stg_run_info_id.7a012bc9a3", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "schema_test/not_null_stg_run_info_id.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg_run_info_id", "alias": "not_null_stg_run_info_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1627989868, "column_name": "id"}, "test.benchmark_analysis.unique_stg_run_info_run_file_name.453a723319": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "run_file_name", "model": "{% if config.get('where') %}(select * from {{ ref('stg_run_info') }} where {{config.get('where')}}) stg_run_info{% else %}{{ ref('stg_run_info') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_dbt_test__audit", "fqn": ["benchmark_analysis", "schema_test", "unique_stg_run_info_run_file_name"], "unique_id": "test.benchmark_analysis.unique_stg_run_info_run_file_name.453a723319", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "schema_test/unique_stg_run_info_run_file_name.sql", "original_file_path": "models/staging/schema.yml", "name": "unique_stg_run_info_run_file_name", "alias": "unique_stg_run_info_run_file_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1627989868, "column_name": "run_file_name"}, "test.benchmark_analysis.not_null_stg_run_info_run_file_name.a85b278123": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "run_file_name", "model": "{% if config.get('where') %}(select * from {{ ref('stg_run_info') }} where {{config.get('where')}}) stg_run_info{% else %}{{ ref('stg_run_info') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_dbt_test__audit", "fqn": ["benchmark_analysis", "schema_test", "not_null_stg_run_info_run_file_name"], "unique_id": "test.benchmark_analysis.not_null_stg_run_info_run_file_name.a85b278123", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "schema_test/not_null_stg_run_info_run_file_name.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg_run_info_run_file_name", "alias": "not_null_stg_run_info_run_file_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1627989868, "column_name": "run_file_name"}, "test.benchmark_analysis.unique_stg_run_info_friendly_name.d38cceb7f9": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "friendly_name", "model": "{% if config.get('where') %}(select * from {{ ref('stg_run_info') }} where {{config.get('where')}}) stg_run_info{% else %}{{ ref('stg_run_info') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_dbt_test__audit", "fqn": ["benchmark_analysis", "schema_test", "unique_stg_run_info_friendly_name"], "unique_id": "test.benchmark_analysis.unique_stg_run_info_friendly_name.d38cceb7f9", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "schema_test/unique_stg_run_info_friendly_name.sql", "original_file_path": "models/staging/schema.yml", "name": "unique_stg_run_info_friendly_name", "alias": "unique_stg_run_info_friendly_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1627989868, "column_name": "friendly_name"}, "test.benchmark_analysis.not_null_stg_run_info_friendly_name.db487c2e60": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "friendly_name", "model": "{% if config.get('where') %}(select * from {{ ref('stg_run_info') }} where {{config.get('where')}}) stg_run_info{% else %}{{ ref('stg_run_info') }}{% endif %}"}, "namespace": null}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null"], "nodes": ["model.benchmark_analysis.stg_run_info"]}, "config": {"enabled": true, "materialized": "test", "persist_docs": {}, "vars": {}, "quoting": {}, "column_types": {}, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "full_refresh": null, "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0", "post-hook": [], "pre-hook": []}, "database": null, "schema": "dev_benchmark_dbt_test__audit", "fqn": ["benchmark_analysis", "schema_test", "not_null_stg_run_info_friendly_name"], "unique_id": "test.benchmark_analysis.not_null_stg_run_info_friendly_name.db487c2e60", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "schema_test/not_null_stg_run_info_friendly_name.sql", "original_file_path": "models/staging/schema.yml", "name": "not_null_stg_run_info_friendly_name", "alias": "not_null_stg_run_info_friendly_name", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["stg_run_info"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1627989868, "column_name": "friendly_name"}}, "sources": {}, "macros": {"macro.benchmark_analysis.agg_results_per_run": {"unique_id": "macro.benchmark_analysis.agg_results_per_run", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "macros/agg_results_per_run.sql", "original_file_path": "macros/agg_results_per_run.sql", "name": "agg_results_per_run", "macro_sql": "{% macro agg_results_per_run(data_size) %}\n    \n   \n    SELECT\n        SUM(l.elapsed_min) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        l.run_id,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        {{ dbt_utils.current_timestamp() }} AS dbt_execution_date\n    FROM {{ ref('fact_performance_logs') }} l\n    JOIN {{ ref('stg_run_info') }} r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '{{ data_size }}'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.run_id, l.is_partitioned\n\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.benchmark_analysis.agg_results_per_thread": {"unique_id": "macro.benchmark_analysis.agg_results_per_thread", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "macros/agg_results_per_thread.sql", "original_file_path": "macros/agg_results_per_thread.sql", "name": "agg_results_per_thread", "macro_sql": "{% macro agg_results_per_thread(data_size) %}\n    \n   \n    SELECT\n        SUM(l.elapsed_min) / MAX(l.run_id) AS elapsed_min_sum,\n        MIN(l.date_time) AS run_start_time,\n        l.technology_name,\n        MAX(l.run_id) AS runs_number,\n        r.friendly_name,\n        l.source_file_name,\n        l.is_partitioned,\n        CASE l.is_partitioned\n            WHEN true THEN concat(l.technology_name, '-partitioned')  \n            ELSE concat(l.technology_name, '-non-partitioned')\n        END AS run_category,\n        {{ dbt_utils.current_timestamp() }} AS dbt_execution_date\n    FROM {{ ref('fact_performance_logs') }} l\n    JOIN {{ ref('stg_run_info') }} r ON l.source_file_name = r.run_file_name\n    WHERE l.data_size == '{{ data_size }}'\n    GROUP BY l.technology_name, l.source_file_name, r.friendly_name, l.is_partitioned\n\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.benchmark_analysis.agg_results_per_thread_with_pricing": {"unique_id": "macro.benchmark_analysis.agg_results_per_thread_with_pricing", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "macros/agg_results_per_thread_with_pricing.sql", "original_file_path": "macros/agg_results_per_thread_with_pricing.sql", "name": "agg_results_per_thread_with_pricing", "macro_sql": "{% macro agg_results_per_thread_with_pricing(data_size) %}\n    \n    WITH logs AS (\n        {{ agg_results_per_thread(data_size) }}\n    ),\n    databricks_logs AS (\n        SELECT \n            d.*,\n            d.elapsed_min_sum / 60 * c.hourly_combined_cost AS cost_usd\n        FROM logs d\n        LEFT JOIN {{ ref('stg_databricks_clusters') }} c ON c.cluster_type = regexp_extract(lcase(d.source_file_name), '([^_]+)$', 1) \n        WHERE d.technology_name == 'databricks'\n    ),\n    synapse_logs AS (\n        SELECT \n            s.*,\n            c.data_processed_sum_tb / s.runs_number * 5 AS cost_usd\n        FROM logs s\n        LEFT JOIN {{ ref('stg_synapse_consumption') }} c ON c.log_file_name = s.source_file_name\n        WHERE s.technology_name == 'synapse'\n    )\n\n    SELECT \n        *\n    FROM databricks_logs\n    UNION\n    SELECT \n        *\n    FROM synapse_logs\n\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.benchmark_analysis.agg_results_per_thread"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.benchmark_analysis.get_dbr_relations_by_pattern": {"unique_id": "macro.benchmark_analysis.get_dbr_relations_by_pattern", "package_name": "benchmark_analysis", "root_path": "/workspace/benchmark_analysis", "path": "macros/utils/get_dbr_relations_by_pattern.sql", "original_file_path": "macros/utils/get_dbr_relations_by_pattern.sql", "name": "get_dbr_relations_by_pattern", "macro_sql": "{% macro get_dbr_relations_by_pattern(table_pattern, exclude='', schema=target.schema) %}\n\n    {% set get_tables %}\n\n      SHOW TABLES FROM  {{ schema }} LIKE '{{ table_pattern }}'\n\n    {% endset %}\n\n    {%- set table_list = run_query(get_tables) -%}\n    \n    {%- if execute -%} \n\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list -%}\n\n            {%- set tbl_relation = api.Relation.create(\n                \n                schema=row.database,\n                identifier=row.tableName,\n                type='table'\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.file_format_clause": {"unique_id": "macro.dbt_spark.file_format_clause", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "file_format_clause", "macro_sql": "{% macro file_format_clause() %}\n  {%- set file_format = config.get('file_format', validator=validation.any[basestring]) -%}\n  {%- if file_format is not none %}\n    using {{ file_format }}\n  {%- endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.location_clause": {"unique_id": "macro.dbt_spark.location_clause", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "location_clause", "macro_sql": "{% macro location_clause() %}\n  {%- set location_root = config.get('location_root', validator=validation.any[basestring]) -%}\n  {%- set identifier = model['alias'] -%}\n  {%- if location_root is not none %}\n    location '{{ location_root }}/{{ identifier }}'\n  {%- endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.options_clause": {"unique_id": "macro.dbt_spark.options_clause", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "options_clause", "macro_sql": "{% macro options_clause() -%}\n  {%- set options = config.get('options') -%}\n  {%- if options is not none %}\n    options (\n      {%- for option in options -%}\n      {{ option }} \"{{ options[option] }}\" {% if not loop.last %}, {% endif %}\n      {%- endfor %}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.comment_clause": {"unique_id": "macro.dbt_spark.comment_clause", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "comment_clause", "macro_sql": "{% macro comment_clause() %}\n  {%- set raw_persist_docs = config.get('persist_docs', {}) -%}\n\n  {%- if raw_persist_docs is mapping -%}\n    {%- set raw_relation = raw_persist_docs.get('relation', false) -%}\n      {%- if raw_relation -%}\n      comment '{{ model.description | replace(\"'\", \"\\\\'\") }}'\n      {% endif %}\n  {%- else -%}\n    {{ exceptions.raise_compiler_error(\"Invalid value provided for 'persist_docs'. Expected dict but got value: \" ~ raw_persist_docs) }}\n  {% endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.partition_cols": {"unique_id": "macro.dbt_spark.partition_cols", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_cols", "macro_sql": "{% macro partition_cols(label, required=false) %}\n  {%- set cols = config.get('partition_by', validator=validation.any[list, basestring]) -%}\n  {%- if cols is not none %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    )\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.clustered_cols": {"unique_id": "macro.dbt_spark.clustered_cols", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "clustered_cols", "macro_sql": "{% macro clustered_cols(label, required=false) %}\n  {%- set cols = config.get('clustered_by', validator=validation.any[list, basestring]) -%}\n  {%- set buckets = config.get('buckets', validator=validation.any[int]) -%}\n  {%- if (cols is not none) and (buckets is not none) %}\n    {%- if cols is string -%}\n      {%- set cols = [cols] -%}\n    {%- endif -%}\n    {{ label }} (\n    {%- for item in cols -%}\n      {{ item }}\n      {%- if not loop.last -%},{%- endif -%}\n    {%- endfor -%}\n    ) into {{ buckets }} buckets\n  {%- endif %}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.fetch_tbl_properties": {"unique_id": "macro.dbt_spark.fetch_tbl_properties", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "fetch_tbl_properties", "macro_sql": "{% macro fetch_tbl_properties(relation) -%}\n  {% call statement('list_properties', fetch_result=True) -%}\n    SHOW TBLPROPERTIES {{ relation }}\n  {% endcall %}\n  {% do return(load_result('list_properties').table) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.create_temporary_view": {"unique_id": "macro.dbt_spark.create_temporary_view", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "create_temporary_view", "macro_sql": "{% macro create_temporary_view(relation, sql) -%}\n  create temporary view {{ relation.include(schema=false) }} as\n    {{ sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__create_table_as": {"unique_id": "macro.dbt_spark.spark__create_table_as", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__create_table_as", "macro_sql": "{% macro spark__create_table_as(temporary, relation, sql) -%}\n  {% if temporary -%}\n    {{ create_temporary_view(relation, sql) }}\n  {%- else -%}\n    {% if config.get('file_format', validator=validation.any[basestring]) == 'delta' %}\n      create or replace table {{ relation }}\n    {% else %}\n      create table {{ relation }}\n    {% endif %}\n    {{ file_format_clause() }}\n    {{ options_clause() }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause() }}\n    {{ comment_clause() }}\n    as\n      {{ sql }}\n  {%- endif %}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.create_temporary_view", "macro.dbt_spark.file_format_clause", "macro.dbt_spark.options_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__create_view_as": {"unique_id": "macro.dbt_spark.spark__create_view_as", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__create_view_as", "macro_sql": "{% macro spark__create_view_as(relation, sql) -%}\n  create or replace view {{ relation }}\n  {{ comment_clause() }}\n  as\n    {{ sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.comment_clause"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__create_schema": {"unique_id": "macro.dbt_spark.spark__create_schema", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__create_schema", "macro_sql": "{% macro spark__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{relation}}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__drop_schema": {"unique_id": "macro.dbt_spark.spark__drop_schema", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__drop_schema", "macro_sql": "{% macro spark__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__get_columns_in_relation": {"unique_id": "macro.dbt_spark.spark__get_columns_in_relation", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__get_columns_in_relation", "macro_sql": "{% macro spark__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      describe extended {{ relation }}\n  {% endcall %}\n  {% do return(load_result('get_columns_in_relation').table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__list_relations_without_caching": {"unique_id": "macro.dbt_spark.spark__list_relations_without_caching", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__list_relations_without_caching", "macro_sql": "{% macro spark__list_relations_without_caching(relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    show table extended in {{ relation }} like '*'\n  {% endcall %}\n\n  {% do return(load_result('list_relations_without_caching').table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__list_schemas": {"unique_id": "macro.dbt_spark.spark__list_schemas", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__list_schemas", "macro_sql": "{% macro spark__list_schemas(database) -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    show databases\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__current_timestamp": {"unique_id": "macro.dbt_spark.spark__current_timestamp", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() -%}\n  current_timestamp()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__rename_relation": {"unique_id": "macro.dbt_spark.spark__rename_relation", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__rename_relation", "macro_sql": "{% macro spark__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    {% if not from_relation.type %}\n      {% do exceptions.raise_database_error(\"Cannot rename a relation with a blank type: \" ~ from_relation.identifier) %}\n    {% elif from_relation.type in ('table') %}\n        alter table {{ from_relation }} rename to {{ to_relation }}\n    {% elif from_relation.type == 'view' %}\n        alter view {{ from_relation }} rename to {{ to_relation }}\n    {% else %}\n      {% do exceptions.raise_database_error(\"Unknown type '\" ~ from_relation.type ~ \"' for relation: \" ~ from_relation.identifier) %}\n    {% endif %}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__drop_relation": {"unique_id": "macro.dbt_spark.spark__drop_relation", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__drop_relation", "macro_sql": "{% macro spark__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__generate_database_name": {"unique_id": "macro.dbt_spark.spark__generate_database_name", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__generate_database_name", "macro_sql": "{% macro spark__generate_database_name(custom_database_name=none, node=none) -%}\n  {% do return(None) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__persist_docs": {"unique_id": "macro.dbt_spark.spark__persist_docs", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__persist_docs", "macro_sql": "{% macro spark__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__alter_column_comment": {"unique_id": "macro.dbt_spark.spark__alter_column_comment", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "spark__alter_column_comment", "macro_sql": "{% macro spark__alter_column_comment(relation, column_dict) %}\n  {% if config.get('file_format', validator=validation.any[basestring]) == 'delta' %}\n    {% for column_name in column_dict %}\n      {% set comment = column_dict[column_name]['description'] %}\n      {% set escaped_comment = comment | replace('\\'', '\\\\\\'') %}\n      {% set comment_query %}\n        alter table {{ relation }} change column \n            {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }}\n            comment '{{ escaped_comment }}';\n      {% endset %}\n      {% do run_query(comment_query) %}\n    {% endfor %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__snapshot_hash_arguments": {"unique_id": "macro.dbt_spark.spark__snapshot_hash_arguments", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__snapshot_hash_arguments", "macro_sql": "{% macro spark__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as string ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__snapshot_string_as_time": {"unique_id": "macro.dbt_spark.spark__snapshot_string_as_time", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__snapshot_string_as_time", "macro_sql": "{% macro spark__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__snapshot_merge_sql": {"unique_id": "macro.dbt_spark.spark__snapshot_merge_sql", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__snapshot_merge_sql", "macro_sql": "{% macro spark__snapshot_merge_sql(target, source, insert_cols) -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert *\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark_build_snapshot_staging_table": {"unique_id": "macro.dbt_spark.spark_build_snapshot_staging_table", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark_build_snapshot_staging_table", "macro_sql": "{% macro spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_identifier = target_relation.identifier ~ '__dbt_tmp' %}\n                                \n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                                  schema=target_relation.schema,\n                                                  database=none,\n                                                  type='view') -%}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {# needs to be a non-temp view so that its columns can be ascertained via `describe` #}\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_view_as(tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__post_snapshot": {"unique_id": "macro.dbt_spark.spark__post_snapshot", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__post_snapshot", "macro_sql": "{% macro spark__post_snapshot(staging_relation) %}\n    {% do adapter.drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__create_columns": {"unique_id": "macro.dbt_spark.spark__create_columns", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "spark__create_columns", "macro_sql": "{% macro spark__create_columns(relation, columns) %}\n    {% if columns|length > 0 %}\n    {% call statement() %}\n      alter table {{ relation }} add columns (\n        {% for column in columns %}\n          `{{ column.name }}` {{ column.data_type }} {{- ',' if not loop.last -}}\n        {% endfor %}\n      );\n    {% endcall %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.materialization_snapshot_spark": {"unique_id": "macro.dbt_spark.materialization_snapshot_spark", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_spark", "macro_sql": "{% materialization snapshot, adapter='spark' %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  {%- set file_format = config.get('file_format', 'parquet') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=none,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if file_format != 'delta' -%}\n    {% set invalid_format_msg -%}\n      Invalid file format: {{ file_format }}\n      Snapshot functionality requires file_format be set to 'delta'\n    {%- endset %}\n    {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n  {% endif %}\n\n  {%- if target_relation_exists -%}\n    {%- if not target_relation.is_delta -%}\n      {% set invalid_format_msg -%}\n        The existing table {{ model.schema }}.{{ target_table }} is in another format than 'delta'\n      {%- endset %}\n      {% do exceptions.raise_compiler_error(invalid_format_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = spark_build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.create_schema", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt_spark.spark_build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.materialization_table_spark": {"unique_id": "macro.dbt_spark.materialization_table_spark", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_spark", "macro_sql": "{% materialization table, adapter = 'spark' %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- setup: if the target relation already exists, drop it\n  -- in case if the existing and future table is delta, we want to do a\n  -- create or replace table instead of dropping, so we don't have the table unavailable\n  {% if old_relation and not (old_relation.is_delta and config.get('file_format', validator=validation.any[basestring]) == 'delta') -%}\n    {{ adapter.drop_relation(old_relation) }}\n  {%- endif %}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {%- endcall %}\n  \n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]})}}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.materialization_view_spark": {"unique_id": "macro.dbt_spark.materialization_view_spark", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_spark", "macro_sql": "{% materialization view, adapter='spark' -%}\n    {{ return(create_or_replace_view()) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__load_csv_rows": {"unique_id": "macro.dbt_spark.spark__load_csv_rows", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "spark__load_csv_rows", "macro_sql": "{% macro spark__load_csv_rows(model, agate_table) %}\n    {% set batch_size = 1000 %}\n    {% set column_override = model['config'].get('column_types', {}) %}\n    \n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n          {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} values\n            {% for row in chunk -%}\n                ({%- for col_name in agate_table.column_names -%}\n                    {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n                    {%- set type = column_override.get(col_name, inferred_type) -%}\n                      cast(%s as {{type}})\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__reset_csv_table": {"unique_id": "macro.dbt_spark.spark__reset_csv_table", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "spark__reset_csv_table", "macro_sql": "{% macro spark__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% if old_relation %}\n        {{ adapter.drop_relation(old_relation) }}\n    {% endif %}\n    {% set sql = create_csv_table(model, agate_table) %}\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__create_csv_table": {"unique_id": "macro.dbt_spark.spark__create_csv_table", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "spark__create_csv_table", "macro_sql": "{% macro spark__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n    {{ file_format_clause() }}\n    {{ partition_cols(label=\"partitioned by\") }}\n    {{ clustered_cols(label=\"clustered by\") }}\n    {{ location_clause() }}\n    {{ comment_clause() }}\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.file_format_clause", "macro.dbt_spark.partition_cols", "macro.dbt_spark.clustered_cols", "macro.dbt_spark.location_clause", "macro.dbt_spark.comment_clause", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.materialization_seed_spark": {"unique_id": "macro.dbt_spark.materialization_seed_spark", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_spark", "macro_sql": "{% materialization seed, adapter='spark' %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier,\n                                               type='table') -%}\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- build model\n  {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% set status = 'CREATE' %}\n  {% set num_rows = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', status ~ ' ' ~ num_rows) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.materialization_incremental_spark": {"unique_id": "macro.dbt_spark.materialization_incremental_spark", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_spark", "macro_sql": "{% materialization incremental, adapter='spark' -%}\n  \n  {#-- Validate early so we don't run SQL if the file_format + strategy combo is invalid --#}\n  {%- set raw_file_format = config.get('file_format', default='parquet') -%}\n  {%- set raw_strategy = config.get('incremental_strategy', default='append') -%}\n  \n  {%- set file_format = dbt_spark_validate_get_file_format(raw_file_format) -%}\n  {%- set strategy = dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) -%}\n  \n  {%- set unique_key = config.get('unique_key', none) -%}\n  {%- set partition_by = config.get('partition_by', none) -%}\n\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% if strategy == 'insert_overwrite' and partition_by %}\n    {% call statement() %}\n      set spark.sql.sources.partitionOverwriteMode = DYNAMIC\n    {% endcall %}\n  {% endif %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or full_refresh_mode %}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% set build_sql = dbt_spark_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key) %}\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.dbt_spark_validate_get_file_format", "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.statement", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_spark.dbt_spark_get_incremental_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.dbt_spark_validate_get_file_format": {"unique_id": "macro.dbt_spark.dbt_spark_validate_get_file_format", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "name": "dbt_spark_validate_get_file_format", "macro_sql": "{% macro dbt_spark_validate_get_file_format(raw_file_format) %}\n  {#-- Validate the file format #}\n\n  {% set accepted_formats = ['text', 'csv', 'json', 'jdbc', 'parquet', 'orc', 'hive', 'delta', 'libsvm'] %}\n\n  {% set invalid_file_format_msg -%}\n    Invalid file format provided: {{ raw_file_format }}\n    Expected one of: {{ accepted_formats | join(', ') }}\n  {%- endset %}\n\n  {% if raw_file_format not in accepted_formats %}\n    {% do exceptions.raise_compiler_error(invalid_file_format_msg) %}\n  {% endif %}\n\n  {% do return(raw_file_format) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy": {"unique_id": "macro.dbt_spark.dbt_spark_validate_get_incremental_strategy", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/validate.sql", "original_file_path": "macros/materializations/incremental/validate.sql", "name": "dbt_spark_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_spark_validate_get_incremental_strategy(raw_strategy, file_format) %}\n  {#-- Validate the incremental strategy #}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    Expected one of: 'append', 'merge', 'insert_overwrite'\n  {%- endset %}\n\n  {% set invalid_merge_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You can only choose this strategy when file_format is set to 'delta'\n  {%- endset %}\n  \n  {% set invalid_insert_overwrite_delta_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when file_format is set to 'delta'\n    Use the 'append' or 'merge' strategy instead\n  {%- endset %}\n  \n  {% set invalid_insert_overwrite_endpoint_msg -%}\n    Invalid incremental strategy provided: {{ raw_strategy }}\n    You cannot use this strategy when connecting via endpoint\n    Use the 'append' or 'merge' strategy instead\n  {%- endset %}\n\n  {% if raw_strategy not in ['append', 'merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {%-else %}\n    {% if raw_strategy == 'merge' and file_format != 'delta' %}\n      {% do exceptions.raise_compiler_error(invalid_merge_msg) %}\n    {% endif %}\n    {% if raw_strategy == 'insert_overwrite' and file_format == 'delta' %}\n      {% do exceptions.raise_compiler_error(invalid_insert_overwrite_delta_msg) %}\n    {% endif %}\n    {% if raw_strategy == 'insert_overwrite' and target.endpoint %}\n      {% do exceptions.raise_compiler_error(invalid_insert_overwrite_endpoint_msg) %}\n    {% endif %}\n  {% endif %}\n\n  {% do return(raw_strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.get_insert_overwrite_sql": {"unique_id": "macro.dbt_spark.get_insert_overwrite_sql", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "name": "get_insert_overwrite_sql", "macro_sql": "{% macro get_insert_overwrite_sql(source_relation, target_relation) %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert overwrite table {{ target_relation }}\n    {{ partition_cols(label=\"partition\") }}\n    select {{dest_cols_csv}} from {{ source_relation.include(database=false, schema=false) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.partition_cols"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.get_insert_into_sql": {"unique_id": "macro.dbt_spark.get_insert_into_sql", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(source_relation, target_relation) %}\n\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n    insert into table {{ target_relation }}\n    select {{dest_cols_csv}} from {{ source_relation.include(database=false, schema=false) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.spark__get_merge_sql": {"unique_id": "macro.dbt_spark.spark__get_merge_sql", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "name": "spark__get_merge_sql", "macro_sql": "{% macro spark__get_merge_sql(target, source, unique_key, dest_columns, predicates=none) %}\n  {# skip dest_columns, use merge_update_columns config if provided, otherwise use \"*\" #}\n  {%- set update_columns = config.get(\"merge_update_columns\") -%}\n  \n  {% set merge_condition %}\n    {% if unique_key %}\n        on DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n    {% else %}\n        on false\n    {% endif %}\n  {% endset %}\n  \n    merge into {{ target }} as DBT_INTERNAL_DEST\n      using {{ source.include(schema=false) }} as DBT_INTERNAL_SOURCE\n      \n      {{ merge_condition }}\n      \n      when matched then update set\n        {% if update_columns -%}{%- for column_name in update_columns %}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n        {%- else %} * {% endif %}\n    \n      when not matched then insert *\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_spark.dbt_spark_get_incremental_sql": {"unique_id": "macro.dbt_spark.dbt_spark_get_incremental_sql", "package_name": "dbt_spark", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/spark", "path": "macros/materializations/incremental/strategies.sql", "original_file_path": "macros/materializations/incremental/strategies.sql", "name": "dbt_spark_get_incremental_sql", "macro_sql": "{% macro dbt_spark_get_incremental_sql(strategy, source, target, unique_key) %}\n  {%- if strategy == 'append' -%}\n    {#-- insert new records into existing table, without updating or overwriting #}\n    {{ get_insert_into_sql(source, target) }}\n  {%- elif strategy == 'insert_overwrite' -%}\n    {#-- insert statements don't like CTEs, so support them via a temp view #}\n    {{ get_insert_overwrite_sql(source, target) }}\n  {%- elif strategy == 'merge' -%}\n  {#-- merge all columns with databricks delta - schema changes are handled for us #}\n    {{ get_merge_sql(target, source, unique_key, dest_columns=none, predicates=none) }}\n  {%- else -%}\n    {% set no_sql_for_strategy_msg -%}\n      No known SQL for the incremental strategy provided: {{ strategy }}\n    {%- endset %}\n    {%- do exceptions.raise_compiler_error(no_sql_for_strategy_msg) -%}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.get_insert_into_sql", "macro.dbt_spark.get_insert_overwrite_sql", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.basic_load_csv_rows": {"unique_id": "macro.dbt.basic_load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "basic_load_csv_rows", "macro_sql": "{% macro basic_load_csv_rows(model, batch_size, agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n  {{ return(basic_load_csv_rows(model, 10000, agate_table) )}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.basic_load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n    ;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/fishtown-analytics/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  {% elif existing_relation.is_view or should_full_refresh() %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% do adapter.drop_relation(intermediate_relation) %}\n      {% do adapter.drop_relation(backup_relation) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n      {% set tmp_relation = make_temp_relation(target_relation) %}\n      {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n      {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n      {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.should_full_refresh", "macro.dbt.make_temp_relation", "macro.dbt.run_query", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_spark.spark__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', macro_namespace = 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view(run_outside_transaction_hooks=True) %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {% if run_outside_transaction_hooks %}\n      -- no transactions on BigQuery\n      {{ run_hooks(pre_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  -- `BEGIN` happens here on Snowflake\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if run_outside_transaction_hooks %}\n      -- No transactions on BigQuery\n      {{ run_hooks(post_hooks, inside_transaction=False) }}\n  {% endif %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }},\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nselect\n    child.{{ column_name }}\n\nfrom {{ model }} as child\n\nleft join {{ to }} as parent\n    on child.{{ column_name }} = parent.{{ field }}\n\nwhere child.{{ column_name }} is not null\n  and parent.{{ field }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by 1\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}};\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select {{ column_name }}\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, * from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, * from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set target_relation = adapter.get_relation(database=table.database,\n                                          schema=table.schema,\n                                         identifier=table.identifier) -%}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not target_relation and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ table ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not target_relation and default is not none -%}\n\n          {{ log(\"Relation \" ~ table ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by 1\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n\n    {%- for col in cols -%}\n\n        {%- if col.column not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed = \n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(field, \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n    \n-%}\n\n     \n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n        \n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/workspace/benchmark_analysis/dbt_modules/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1627989867}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [], "parent_map": {"model.benchmark_analysis.agg_10gb_per_run": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"], "model.benchmark_analysis.agg_10gb_per_thread": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"], "model.benchmark_analysis.agg_10gb_with_pricing": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_databricks_clusters", "model.benchmark_analysis.stg_run_info", "model.benchmark_analysis.stg_synapse_consumption"], "model.benchmark_analysis.agg_1gb_per_run": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"], "model.benchmark_analysis.agg_1gb_per_thread": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"], "model.benchmark_analysis.agg_1gb_with_pricing": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_databricks_clusters", "model.benchmark_analysis.stg_run_info", "model.benchmark_analysis.stg_synapse_consumption"], "model.benchmark_analysis.agg_1tb_per_run": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"], "model.benchmark_analysis.agg_1tb_per_thread": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_run_info"], "model.benchmark_analysis.agg_1tb_with_pricing": ["model.benchmark_analysis.fact_performance_logs", "model.benchmark_analysis.stg_databricks_clusters", "model.benchmark_analysis.stg_run_info", "model.benchmark_analysis.stg_synapse_consumption"], "model.benchmark_analysis.fact_performance_logs": ["model.benchmark_analysis.stg_jmeter_logs", "snapshot.benchmark_analysis.queries_snapshot"], "model.benchmark_analysis.stg_allowed_queries": ["seed.benchmark_analysis.allowed_queries", "seed.benchmark_analysis.allowed_queries"], "model.benchmark_analysis.stg_databricks_clusters": ["seed.benchmark_analysis.databricks_clusters", "seed.benchmark_analysis.databricks_clusters"], "model.benchmark_analysis.stg_jmeter_logs": [], "model.benchmark_analysis.stg_run_info": ["seed.benchmark_analysis.run_info", "seed.benchmark_analysis.run_info"], "model.benchmark_analysis.stg_synapse_consumption": [], "snapshot.benchmark_analysis.queries_snapshot": ["model.benchmark_analysis.stg_allowed_queries"], "seed.benchmark_analysis.allowed_queries": [], "seed.benchmark_analysis.run_info": [], "seed.benchmark_analysis.databricks_clusters": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_small": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_small": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_small": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_small": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_xsmall": [], "seed.benchmark_analysis.databricks_analytics_1gb_delta_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_1gb_delta_small": [], "seed.benchmark_analysis.databricks_analytics_1gb_delta_xsmall": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_large": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_medium": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_large": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_medium": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_small": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_small": [], "seed.benchmark_analysis.databricks_analytics_1tb_parquet_large": [], "seed.benchmark_analysis.databricks_analytics_1tb_parquet_medium": [], "seed.benchmark_analysis.databricks_analytics_1tb_parquet_partitioned_large": [], "seed.benchmark_analysis.databricks_analytics_1tb_parquet_small": [], "seed.benchmark_analysis.synapse_10gb_delta": [], "seed.benchmark_analysis.synapse_10gb_delta_openrowset": [], "seed.benchmark_analysis.synapse_10gb_delta_partitioned_openrowset": [], "seed.benchmark_analysis.synapse_10gb_parquet_openrowset": [], "seed.benchmark_analysis.synapse_10gb_parquet_partitioned_external": [], "seed.benchmark_analysis.synapse_10gb_parquet_partitioned_openrowset": [], "seed.benchmark_analysis.synapse_1gb_delta_openrowset": [], "seed.benchmark_analysis.synapse_1gb_parquet_external": [], "seed.benchmark_analysis.synapse_1gb_parquet_openrowset": [], "seed.benchmark_analysis.synapse_1tb_delta_openrowset": [], "seed.benchmark_analysis.synapse_1tb_parquet_openrowset": [], "seed.benchmark_analysis.consumption_synapse_10gb_delta": [], "seed.benchmark_analysis.consumption_synapse_10gb_delta_openrowset": [], "seed.benchmark_analysis.consumption_synapse_10gb_delta_partitioned_openrowset": [], "seed.benchmark_analysis.consumption_synapse_10gb_parquet_openrowset": [], "seed.benchmark_analysis.consumption_synapse_10gb_parquet_partitioned_external": [], "seed.benchmark_analysis.consumption_synapse_10gb_parquet_partitioned_openrowset": [], "seed.benchmark_analysis.consumption_synapse_1gb_delta_openrowset": [], "seed.benchmark_analysis.consumption_synapse_1gb_parquet_external": [], "seed.benchmark_analysis.consumption_synapse_1gb_parquet_openrowset": [], "seed.benchmark_analysis.consumption_synapse_1tb_delta_openrowset": [], "seed.benchmark_analysis.consumption_synapse_1tb_parquet_openrowset": [], "test.benchmark_analysis.unique_stg_jmeter_logs_log_id.5b8aa7aaff": ["model.benchmark_analysis.stg_jmeter_logs"], "test.benchmark_analysis.not_null_stg_jmeter_logs_log_id.03927e5c5b": ["model.benchmark_analysis.stg_jmeter_logs"], "test.benchmark_analysis.unique_stg_run_info_id.7d9b473df6": ["model.benchmark_analysis.stg_run_info"], "test.benchmark_analysis.not_null_stg_run_info_id.7a012bc9a3": ["model.benchmark_analysis.stg_run_info"], "test.benchmark_analysis.unique_stg_run_info_run_file_name.453a723319": ["model.benchmark_analysis.stg_run_info"], "test.benchmark_analysis.not_null_stg_run_info_run_file_name.a85b278123": ["model.benchmark_analysis.stg_run_info"], "test.benchmark_analysis.unique_stg_run_info_friendly_name.d38cceb7f9": ["model.benchmark_analysis.stg_run_info"], "test.benchmark_analysis.not_null_stg_run_info_friendly_name.db487c2e60": ["model.benchmark_analysis.stg_run_info"]}, "child_map": {"model.benchmark_analysis.agg_10gb_per_run": [], "model.benchmark_analysis.agg_10gb_per_thread": [], "model.benchmark_analysis.agg_10gb_with_pricing": [], "model.benchmark_analysis.agg_1gb_per_run": [], "model.benchmark_analysis.agg_1gb_per_thread": [], "model.benchmark_analysis.agg_1gb_with_pricing": [], "model.benchmark_analysis.agg_1tb_per_run": [], "model.benchmark_analysis.agg_1tb_per_thread": [], "model.benchmark_analysis.agg_1tb_with_pricing": [], "model.benchmark_analysis.fact_performance_logs": ["model.benchmark_analysis.agg_10gb_per_run", "model.benchmark_analysis.agg_10gb_per_thread", "model.benchmark_analysis.agg_10gb_with_pricing", "model.benchmark_analysis.agg_1gb_per_run", "model.benchmark_analysis.agg_1gb_per_thread", "model.benchmark_analysis.agg_1gb_with_pricing", "model.benchmark_analysis.agg_1tb_per_run", "model.benchmark_analysis.agg_1tb_per_thread", "model.benchmark_analysis.agg_1tb_with_pricing"], "model.benchmark_analysis.stg_allowed_queries": ["snapshot.benchmark_analysis.queries_snapshot"], "model.benchmark_analysis.stg_databricks_clusters": ["model.benchmark_analysis.agg_10gb_with_pricing", "model.benchmark_analysis.agg_1gb_with_pricing", "model.benchmark_analysis.agg_1tb_with_pricing"], "model.benchmark_analysis.stg_jmeter_logs": ["model.benchmark_analysis.fact_performance_logs", "test.benchmark_analysis.not_null_stg_jmeter_logs_log_id.03927e5c5b", "test.benchmark_analysis.unique_stg_jmeter_logs_log_id.5b8aa7aaff"], "model.benchmark_analysis.stg_run_info": ["model.benchmark_analysis.agg_10gb_per_run", "model.benchmark_analysis.agg_10gb_per_thread", "model.benchmark_analysis.agg_10gb_with_pricing", "model.benchmark_analysis.agg_1gb_per_run", "model.benchmark_analysis.agg_1gb_per_thread", "model.benchmark_analysis.agg_1gb_with_pricing", "model.benchmark_analysis.agg_1tb_per_run", "model.benchmark_analysis.agg_1tb_per_thread", "model.benchmark_analysis.agg_1tb_with_pricing", "test.benchmark_analysis.not_null_stg_run_info_friendly_name.db487c2e60", "test.benchmark_analysis.not_null_stg_run_info_id.7a012bc9a3", "test.benchmark_analysis.not_null_stg_run_info_run_file_name.a85b278123", "test.benchmark_analysis.unique_stg_run_info_friendly_name.d38cceb7f9", "test.benchmark_analysis.unique_stg_run_info_id.7d9b473df6", "test.benchmark_analysis.unique_stg_run_info_run_file_name.453a723319"], "model.benchmark_analysis.stg_synapse_consumption": ["model.benchmark_analysis.agg_10gb_with_pricing", "model.benchmark_analysis.agg_1gb_with_pricing", "model.benchmark_analysis.agg_1tb_with_pricing"], "snapshot.benchmark_analysis.queries_snapshot": ["model.benchmark_analysis.fact_performance_logs"], "seed.benchmark_analysis.allowed_queries": ["model.benchmark_analysis.stg_allowed_queries", "model.benchmark_analysis.stg_allowed_queries"], "seed.benchmark_analysis.run_info": ["model.benchmark_analysis.stg_run_info", "model.benchmark_analysis.stg_run_info"], "seed.benchmark_analysis.databricks_clusters": ["model.benchmark_analysis.stg_databricks_clusters", "model.benchmark_analysis.stg_databricks_clusters"], "seed.benchmark_analysis.databricks_analytics_10gb_delta_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_small": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_partitioned_xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_small": [], "seed.benchmark_analysis.databricks_analytics_10gb_delta_xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_small": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_partitioned_xsmall": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_small": [], "seed.benchmark_analysis.databricks_analytics_10gb_parquet_xsmall": [], "seed.benchmark_analysis.databricks_analytics_1gb_delta_2xsmall": [], "seed.benchmark_analysis.databricks_analytics_1gb_delta_small": [], "seed.benchmark_analysis.databricks_analytics_1gb_delta_xsmall": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_large": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_medium": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_large": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_medium": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_partitioned_small": [], "seed.benchmark_analysis.databricks_analytics_1tb_delta_small": [], "seed.benchmark_analysis.databricks_analytics_1tb_parquet_large": [], "seed.benchmark_analysis.databricks_analytics_1tb_parquet_medium": [], "seed.benchmark_analysis.databricks_analytics_1tb_parquet_partitioned_large": [], "seed.benchmark_analysis.databricks_analytics_1tb_parquet_small": [], "seed.benchmark_analysis.synapse_10gb_delta": [], "seed.benchmark_analysis.synapse_10gb_delta_openrowset": [], "seed.benchmark_analysis.synapse_10gb_delta_partitioned_openrowset": [], "seed.benchmark_analysis.synapse_10gb_parquet_openrowset": [], "seed.benchmark_analysis.synapse_10gb_parquet_partitioned_external": [], "seed.benchmark_analysis.synapse_10gb_parquet_partitioned_openrowset": [], "seed.benchmark_analysis.synapse_1gb_delta_openrowset": [], "seed.benchmark_analysis.synapse_1gb_parquet_external": [], "seed.benchmark_analysis.synapse_1gb_parquet_openrowset": [], "seed.benchmark_analysis.synapse_1tb_delta_openrowset": [], "seed.benchmark_analysis.synapse_1tb_parquet_openrowset": [], "seed.benchmark_analysis.consumption_synapse_10gb_delta": [], "seed.benchmark_analysis.consumption_synapse_10gb_delta_openrowset": [], "seed.benchmark_analysis.consumption_synapse_10gb_delta_partitioned_openrowset": [], "seed.benchmark_analysis.consumption_synapse_10gb_parquet_openrowset": [], "seed.benchmark_analysis.consumption_synapse_10gb_parquet_partitioned_external": [], "seed.benchmark_analysis.consumption_synapse_10gb_parquet_partitioned_openrowset": [], "seed.benchmark_analysis.consumption_synapse_1gb_delta_openrowset": [], "seed.benchmark_analysis.consumption_synapse_1gb_parquet_external": [], "seed.benchmark_analysis.consumption_synapse_1gb_parquet_openrowset": [], "seed.benchmark_analysis.consumption_synapse_1tb_delta_openrowset": [], "seed.benchmark_analysis.consumption_synapse_1tb_parquet_openrowset": [], "test.benchmark_analysis.unique_stg_jmeter_logs_log_id.5b8aa7aaff": [], "test.benchmark_analysis.not_null_stg_jmeter_logs_log_id.03927e5c5b": [], "test.benchmark_analysis.unique_stg_run_info_id.7d9b473df6": [], "test.benchmark_analysis.not_null_stg_run_info_id.7a012bc9a3": [], "test.benchmark_analysis.unique_stg_run_info_run_file_name.453a723319": [], "test.benchmark_analysis.not_null_stg_run_info_run_file_name.a85b278123": [], "test.benchmark_analysis.unique_stg_run_info_friendly_name.d38cceb7f9": [], "test.benchmark_analysis.not_null_stg_run_info_friendly_name.db487c2e60": []}}